{
  "openapi": "3.0.1",
  "info": {
    "title": "Dell Technologies PowerProtect Cyber Recovery REST API",
    "description": "Dell Technologies PowerProtect Cyber Recovery REST Interface",
    "contact": {
      "email": "support@dell.com"
    },
    "version": "2"
  },
  "servers": [
    {
      "url": "https://$CRMGMTHOST:14778/cr"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Login/Logout and refresh token"
    },
    {
      "name": "Users",
      "description": "Manage CR user accounts"
    },
    {
      "name": "Storage",
      "description": "Manage CR storage assets"
    },
    {
      "name": "Applications",
      "description": "Manage CR application assets"
    },
    {
      "name": "Policies",
      "description": "Manage CR policies"
    },
    {
      "name": "Vault",
      "description": "Manage the CR vault"
    },
    {
      "name": "Actions",
      "description": "Run an action on a policy"
    },
    {
      "name": "Schedules",
      "description": "Manage schedules for actions for CR"
    },
    {
      "name": "Notifications",
      "description": "Access CR notifications"
    },
    {
      "name": "System",
      "description": "Access CR global settings & configuration"
    },
    {
      "name": "vCenters",
      "description": "Manage CR vCenter assets"
    },
    {
      "name": "Clouds",
      "description": "Manage CR clouds"
    },
    {
      "name": "Reporting",
      "description": "Manage CR reporting"
    },
    {
      "name": "Sheltered Harbor",
      "description": "Manage CR Sheltered Harbor"
    }
  ],
  "paths": {
    "/v8/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login the specified user into CR",
        "description": "**User with dashboard, admin, operator or security-officer role can issue this API.**",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login with the CR username and password and MFA security code, if enabled",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authLoginUserRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authLoginUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/logout/{id}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log off the current user",
        "description": "**User with dashboard, admin, operator or security-officer role can issue this API.**",
        "operationId": "logoutUser",
        "parameters": [
          {
            "name": "X-CR-REFRESH-TOKEN",
            "in": "header",
            "description": "Refresh token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be logged out",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/refresh/{id}/{method}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh authentication token",
        "description": "**Any user can issue this API.**",
        "operationId": "refreshToken",
        "parameters": [
          {
            "name": "X-CR-REFRESH-TOKEN",
            "in": "header",
            "description": "Refresh token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user associated with specified token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "path",
            "description": "The HTTP method (GET, POST, PUT, PATCH, DELETE) for the subsequent API calls.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/logincount": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Retrieve the maximum login counts",
        "description": "Retrieve the maximum login counts for every user role. **Only a user with security-officer role can issue this API.**",
        "operationId": "GetLogincount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authGetLoginCount"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update the maximum login counts",
        "description": "Update the maximum login counts for every user role. **Only a user with security-officer role can issue this API.**",
        "operationId": "UpdateLogincount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Login count",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authUpdateLoginCountRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Logincount updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authUpdateLoginCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve users as authorized user",
        "description": "Retrieves users that the current user is authorized to view. **Only a user with security-officer role can issue this API.**",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGetUsers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "The current user must have authorization to create the user. **Only a user with security-officer role can issue this API.**",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersCreateUserRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersCreateUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by id",
        "description": "Get a specific user by id. **User with admin or security-officer role can issue this API.**",
        "operationId": "GetUserByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGetUserById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "The current user must have authorization to delete the user. **Only a user with security-officer role can issue this API.**",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "The current user must have authorization to update the user. **User with admin or security-officer role can issue this API.**",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersUpdateUserRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersUpdateUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/users/settings": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetUserSettings",
        "parameters": [
          {
            "name": "X-CR-AUth-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update Users settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateUserSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/users/generate-mfa-key": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get MFA security code",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetMFAsecuritycode",
        "parameters": [
          {
            "name": "X-CR-AUth-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGenerateMfaKey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/users/{id}/configure-mfa": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Enable user's MFA setup",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "EnableMFA",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enable user's MFA setup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersConfigureMfaRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Disable user's MFA setup",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "DisableMFA",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all storage end points",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorage",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetAllStorages"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Create a new storage end point",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "CreateStorage",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create a new storage end point object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postStorage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Storage created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageCreateStorage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/storageminimal": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all storage end points",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorageMinimal",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageListMinimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/tree": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all storage end points and mtrees",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorageTree",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageTreeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "this is an error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "this is an error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/export": {
      "get": {
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Export all storage (systems and capacity)",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportStorages",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportType",
            "in": "query",
            "description": "Export storages like systems, capacitySystems and capacityMtrees",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/v8/storage/{id}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage by id",
        "description": "Get a specific storage resource by id. **Only a user with admin or operator role can issue this API.**",
        "operationId": "getStorageByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetStorage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Storage resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage"
        ],
        "summary": "Delete a storage resource",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "deleteStorage",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v9/storage/{id}": {
      "patch": {
        "tags": [
          "Storage"
        ],
        "summary": "Update one or more values for the storage resource",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "updateStorage",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated storage resource",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchStorage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Storage updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageUpdateStorage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/storage/{id}/mtrees": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get All storage mtree stats",
        "description": "Get mtree capacity details. **Only a user with admin or operator role can issue this API.**",
        "operationId": "GetAllStorageMtrees",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetStorageMtrees"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Storage resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/mtrees/{mtree_id}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get mtree stats",
        "description": "Get mtree capacity details. **Only a user with admin or operator role can issue this API.**",
        "operationId": "getMtreeStats",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mtree_id",
            "in": "path",
            "description": "The id of the mtree that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetMtree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Storage resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/networkinfo": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage network information",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorageNetworkInfo",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageNetworkInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/configurable": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage object by ID with filtered replication information",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "getStorageByIDConfigurable",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetConfigurableStorage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/configurable": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all storage object end points with filtered replication information",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorageConfigurable",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/storageGetConfigurableStorage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/config": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage configuration by ID",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "getStorageByIDConfig",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/configMinimal": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get minimal storage configuration by ID",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "getStorageByIDConfigMinimal",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage that needs to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/{id}/capabilities": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get capablities of storage object per storage ID",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "getStorageByIDCapabilities",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the storage to retrieve the capabilities",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageGetStorageCapabilities"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/storage/settings": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStorageSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Storage"
        ],
        "summary": "Update storage settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateStorageSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/apps": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get all applications",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetApps",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appsGetApps"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v9/apps": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create application resource",
        "description": "Creates an application resource. **Only a user with admin role can issue this API.**",
        "operationId": "CreateApp",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "app resource",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/appsCreateAppRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appsCreateApp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/apps/export": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Export all applications",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportApps",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/apps/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get specific application",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetAppByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the app to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appsGetAppById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete an application resource",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "deleteApp",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the app that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v10/apps/{id}": {
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update the application",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "UpdateApp",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of app that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attribute(s) to be updated. For multilinks field, any existing multilink definition or link that is not provided will be removed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/appsUpdateAppRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appsUpdateApp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/apps/{id}/multilinknetinterfaces": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get network interfaces for multilink",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetMultiLinkInterfaces",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the app to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appsGetMultilinkNetInterfaces"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/apps/{id}/refreshmultilink": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Refresh app multilink definition statuses",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "RefreshMultilink",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the app to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/apps/settings": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get all app settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetAppsSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update settings",
        "description": "Update settings for apps service. **Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateAppsSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all CR policies",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetPolicies"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create a new CR policy",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "policy components",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesCreatePolicyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesCreatePolicy"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies/export": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Export all policies within IR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportPolicies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/settings": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the policy settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPoliciesSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Policies"
        ],
        "summary": "Update settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdatePoliciesSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies/types": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the policy types",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicyTypes",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetTypes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/copies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all copies within IR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetAllCopies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetCopies"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete multiple copies",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "PutDeleteCopies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of copies to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesPutCopiesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesPutCopies"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete multiple copies",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DeleteCopies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of copies to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesDeleteCopiesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesDeleteCopies"
                }
              }
            }
          },
          "206": {
            "description": "Partial delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesDeleteCopies"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies/copies/export": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Export all copies within IR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportCopies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the detailed info of a given policy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicyById",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetPolicyById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete policy",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the policy to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Policies"
        ],
        "summary": "update a CR policy",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the policy to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated policy object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesUpdatePolicyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesUpdatePolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies/jobs": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the jobs",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetJobs",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "provide values to be sorted +/- for asc/desc ex:sort=-jobname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "GLOBAL_SEARCH",
            "in": "query",
            "description": "Search values irrespective of column name ex:GLOBAL_SEARCH=like:{serachvalue}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetJobs"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/jobs/export": {
      "get": {
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "tags": [
          "Policies"
        ],
        "summary": "Export all jobs",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportJobs",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobtype",
            "in": "query",
            "description": "Export jobs like Protection, System, Recovery",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Takes value as Success, Critical, Warning, Canceled, Running, Canceling",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/v8/policies/jobsCount": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the jobs count",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetJobsCount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetJobsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/jobs/{jobid}/cancel": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Cancel a running job",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "CancelJob",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobid",
            "in": "path",
            "description": "id of the job to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/jobs": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the jobs for a policy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicyJobs",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id for the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetPolicyJobs"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/jobs/{jobid}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get job by ID",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetJobByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id for the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobid",
            "in": "path",
            "description": "jobid for the job",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/policiesCopyLockJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesCreateSandboxJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesRecoverToAlternateJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesSecureCopyAnalyzeJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesLockJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesRecoverappJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesDeleteCopies"
                    },
                    {
                      "$ref": "#/components/schemas/policiesSyncCopyJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesSyncJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesSecureCopyJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesRecoveryCheckJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesDrbackupJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesAnalyzeJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesCopyJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesDeleteSandbox"
                    },
                    {
                      "$ref": "#/components/schemas/policiesReverseSyncJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesCleanupJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesNetworkerRecoveryCheckJob"
                    },
                    {
                      "$ref": "#/components/schemas/policiesConfigureMultilinkJob"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/copies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all the copies for this policy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetCopies",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id for the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetCopies"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/copies/{copyid}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the detailed info of a given copy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetCopyByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id to fetch the specified copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "description": "id of the copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetCopyById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete a specific copy",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DeleteCopyByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id to delete the specified copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "description": "id of the copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/copies/{copyid}/details": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the detailed info of a given copy and subcopies",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetCopyDetails",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id to fetch the specified copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "description": "id of the copy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetCopyDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/sandboxes": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all sandboxes",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSandboxes",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetSandboxes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{policyid}/sandboxes": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all sandboxes for a copy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicySandboxes",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyid",
            "in": "path",
            "description": "policy id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetSandboxes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/sandboxes/{sandboxid}/details": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the detailed info of the sandbox",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSandboxDetails",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Refresh token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxid",
            "in": "path",
            "description": "sandbox id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesSandboxDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/sandboxes/{sandboxid}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the detailed info of the sandbox",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSandboxByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxid",
            "in": "path",
            "description": "sandbox id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetSandboxById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete a sandbox",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "DeleteSandbox",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "policy id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxid",
            "in": "path",
            "description": "sandbox id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesDeleteSandbox"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/sandboxes/export": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Export all sandboxes within CR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportSandboxes",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxType",
            "in": "query",
            "description": "Export sandboxes like sandbox and recovery",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/policies/{id}/copies/{copyid}/analyze": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Analysis on PIT copy with id",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetPolicyAnalysis",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetAnalyze"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Analyze PIT copy with id",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "RunPolicyAnalysis",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Policy components",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesPostAnalyzeRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesPostAnalyze"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/policies/copies/{copyid}/analysisreports": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Analysis on PIT copy with id",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetAnalysisReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesGetAnalysisReport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Email analysis report for given copy",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "EmailAnalysisReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "list of email ids",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/policiesPostAnalysisReportRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policiesPostAnalysisReport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/vault/state": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Gets the CR vault state",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetVaultState",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/vaultUnlocked"
                    },
                    {
                      "$ref": "#/components/schemas/vaultLocked"
                    },
                    {
                      "$ref": "#/components/schemas/vaultUnknown"
                    },
                    {
                      "$ref": "#/components/schemas/vaultSecured"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/vault/secure": {
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Force lock the vault",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "PostVaultSecure",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/vault/release": {
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Manually unlock the vault",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "PostVaultRelease",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/vault/settings": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Get the vault settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetVaultSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Vault"
        ],
        "summary": "Update vault settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateVaultSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/testEmail": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send an email to users",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "test email",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsSendEmailRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsSendEmail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/alerts": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all CR alerts",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetAlerts",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Get alerts of specific category like System,Storage,Security",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetAlerts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/alerts/export": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Export all alerts within CR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportAlerts",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/totalAlertsCount": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all total alert count",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetTotalAlertsCount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Get total alert count of specific category like System,Storage,Security",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetAlertsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/alerts/acknowledge": {
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Acknowledge multiple alerts",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "BatchAlertAcknowledge",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The alert IDs to acknowledge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsAcknowledgeAlertsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "207": {
            "description": "Partial success",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/alerts/unacknowledge": {
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Unacknowledge multiple alerts",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "BatchAlertUnacknowledge",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The alert IDs to unacknowledge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsUnacknowledgeAlertsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "207": {
            "description": "Partial success",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/alerts/{id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get specific Alert",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetAlertById",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the alert to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetAlertById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update alert notes or acknowledge status",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "UpdateAlert",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the alert to modify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The notes or acknowledge status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsUpdateAlertRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsUpdateAlert"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/events": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all CR events",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetEvents",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Get events of specific category like System,Storage,Security",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetEvents"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/events/{id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get specific Event",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetEventById",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetEventById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/settings": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get the notification settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetNotificationsSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update notification settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "SetNotificationsSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/notifications/email": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get CR email server settings",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetEmailSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Get CR email server settings",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsGetEmailSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Patch CR email server settings",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "PatchEmailSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the mail server settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsUpdateEmailSettingsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsUpdateEmailSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/notifications/retrieveEmailCert": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieves email certificate of mail server",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "PostRetrieveEmailCert",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Retrieve email certificate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsMailServerRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsMailServerCert"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/schedules": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get all schedules",
        "description": "Get all schedules for CR. **Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSchedules",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedulesGetSchedules"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Schedules"
        ],
        "summary": "Create schedule resource",
        "description": "Create a new schedule resource. **Only a user with admin or operator role can issue this API.**",
        "operationId": "CreateSchedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create schedule resource",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedulesCreateScheduleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schedulesCreateSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesCreateJobsSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesCreateCsSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesCreateSyncJobs"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesCreateAnalyzeJobs"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/schedules/{id}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get schedule by id",
        "description": "Get a specific schedule by id. **Only a user with admin or operator role can issue this API.**",
        "operationId": "getScheduleById",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the schedule that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schedulesGetScheduleById"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesGetJobsReportSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesGetCsReportSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesGetSyncJobsReport"
                    },
                    {
                      "$ref": "#/components/schemas/schedulesGetAnalyzeJobsReport"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Scheduled action not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Schedules"
        ],
        "summary": "Delete schedule",
        "description": "Delete schedule resource. **Only a user with admin role can issue this API.**",
        "operationId": "DeleteSchedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of schedule to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Schedules"
        ],
        "summary": "Update the schedule",
        "description": "Update an entire schedule entry. **Only a user with admin role can issue this API.**",
        "operationId": "updateSchedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the schedule to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated schedule object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedulesUpdateScheduleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/schedules/export": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Export all schedules within IR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportSchedules",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/schedules/settings": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get all the settings",
        "description": "Get all settings for schedule service. **Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Schedules"
        ],
        "summary": "Update settings",
        "description": "Update settings for schedule service. **Only a user with admin or operator role can issue this API.**",
        "operationId": "SetSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/schedules/randomizer": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get randomizer configuration",
        "description": "Get randomizer settings. **Only a user with admin or operator role can issue this API.**",
        "operationId": "GetRandomizer",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedulesGetRandomizer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Schedules"
        ],
        "summary": "Update randomizer",
        "description": "Update randomizer settings. **Only a user with admin role can issue this API.**",
        "operationId": "SetRandomizer",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the randomizer config",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedulesUpdateRandomizer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/schedules/actions/cleanup": {
      "post": {
        "tags": [
          "Schedules"
        ],
        "summary": "Cleanup multiple schedules",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "Delete multiple schedules",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delete multiple schedules",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedulesCleanupRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedulesCleanup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/sync": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a sync operation",
        "description": "Run a sync operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionSync",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsSync"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/drbackup": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Initiate a DR Backup",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "InitiateDRBackup",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsDrbackup"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/clean": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Start the cleaning operation now",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "startcleaningoperation",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cleaning schedule information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsCleanRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsClean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/sync-copy": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a sync-copy operation",
        "description": "Run a sync-copy operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionSyncCopy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsSyncCopy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/securecopy": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a secure copy (sync-copy-lock) operation",
        "description": "Run a secure copy (sync-copy-lock) operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "SecureCopy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsSecureCopy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/securecopyanalyze": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a securecopyanalyze (securecopy-analyze) operation",
        "description": "Run a securecopyanalyze (securecopy-analyze) operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "SecureCopyAnalyze",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsSecureCopyAnalyzeRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsSecureCopyAnalyze"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/copy": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a copy operation",
        "description": "Run a copy operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionCopy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsCopy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/copy-lock": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a copy-lock operation",
        "description": "Run a copy-lock operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionCopyLock",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsCopyLock"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/lock": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a lock operation",
        "description": "Run a sync-copy operation on a policy. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionLock",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsLockRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsLock"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/analyze": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run an analysis on a copy",
        "description": "Run a deep analysis on a copy in the vault. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionAnalyze",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsAnalyzeRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsAnalyze"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/recoverapp": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a recovery for a copy",
        "description": "Run a recovery in the vault for an application. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionRecovery",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRecoverAppRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsRecoverapp"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/linked-recoverapp": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a linked recovery for a copy",
        "description": "Run a linked recovery in the vault for an application. Must be run only when recoverapp is running or complete. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionLinkedRecovery",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsLinkedRecoveryRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsLinkedRecoverapp"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/recover-to-alternate": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a recovery for a copy",
        "description": "Run a recovery in the vault to alternate replication mtree. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionRecoverToAlt",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRecoverToAltRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsRecoverToAlternate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/reverse-sync": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a reverse sync job",
        "description": "Run a reverse sync job in the vault to perform replication from vault to external DD. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionReverseSync",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsReverseSyncRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsReverseSync"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/recoverycheck": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Run a recovery for a copy",
        "description": "Run a recovery in the vault for an application. **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionRecoveryCheck",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsRecoveryCheckRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsRecoveryCheck"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/actions/createsandbox": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create a recovery sandbox",
        "description": "From a copy (copyID) create a recovery sandbox (read/write). **Only a user with admin or operator role can issue this API.**",
        "operationId": "ActionCreateSandbox",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsCreateSandboxRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actionsCreateSandbox"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/dashboard": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the dashboard data",
        "description": "**User with dashboard, admin, operator or security-officer role can issue this API.**",
        "operationId": "dashboard",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/license": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the license data",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "getLicense",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetLicense"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Set the license information",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "setLicense",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/systemSetLicenseRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemSetLicense"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/clean": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the cleaning schedule details",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "getCleaningSchedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetCleaningSchedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Update the cleaning schedule details",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "updateCleaningSchedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cleaning schedule information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/actionsClean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemUpdateCleaningSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/supportbundle": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Create a log bundle in the log directory",
        "description": "**User with admin, operator or security-officer role can issue this API.**",
        "operationId": "supportBundle",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemCreateBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/support-log-bundles": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get support log bundle details",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetsupportBundle",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetBundles"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Initiate a log bundle creation in the log directory",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "CreatesupportBundle",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemInitiateBundle"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/support-log-bundles/{bundleid}": {
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete support log bundle",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "DeleteSupportBundle",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleid",
            "in": "path",
            "description": "Id of bundle to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/support-log-bundles/{bundleid}/download": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Download support bundle",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "bundleid",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/status": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Returns the status of the CR services",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "status",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/settings": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the system settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetSystemSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Set the system settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "SetSystemSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/timezone": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the CR Host Date and Timezone",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetHostTimezone",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemHostTimezone"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/retrievecerts": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "get certificate from the server",
        "description": "**User with admin role can issue this API.**",
        "operationId": "Retrievecert",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to run an action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemRetrieveCertReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemRetrieveCertResp"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/cr": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get CR REST api versions and CR version",
        "description": "**User with dashboard, admin, operator or security-officer role can issue this API.**",
        "operationId": "RestVersions",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/crRESTversions"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/v8/versions": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get the CR, Data Domain and vCenter versions",
        "description": "**User with admin or security-officer role can issue this API.**",
        "operationId": "GetCrVersions",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/vcenters": {
      "get": {
        "tags": [
          "vCenters"
        ],
        "summary": "Get all vcenters",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetVcenters",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vCentersGetVcenters"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "vCenters"
        ],
        "summary": "Create vcenter resource",
        "description": "Creates a vcenter resource. **Only a user with admin role can issue this API.**",
        "operationId": "CreateVcenter",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vcenter resource",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vCentersCreateVcenterRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vCentersCreateVcenter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/vcenters/export": {
      "get": {
        "tags": [
          "vCenters"
        ],
        "summary": "Export all Vcenters within CR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportVcenters",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/vcenters/{id}": {
      "get": {
        "tags": [
          "vCenters"
        ],
        "summary": "Get specific vcenter",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetVcenterByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the vcenter to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vCentersGetVcenterById"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "vCenters"
        ],
        "summary": "Delete a vcenter resource",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "deleteVcenter",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the vcenter that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v9/vcenters/{id}": {
      "patch": {
        "tags": [
          "vCenters"
        ],
        "summary": "Update the vcenter",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "UpdateVcenter",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of vcenter that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attribute(s) to be update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vCentersUpdateVcenterRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vCentersUpdateVcenter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/vcenters/settings": {
      "get": {
        "tags": [
          "vCenters"
        ],
        "summary": "Get all vcenter settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetVcenterSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "vCenters"
        ],
        "summary": "Update settings",
        "description": "Update settings for vcenter service. **Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateVcenterSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/drbackup": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Display the DR Backup schedule information",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "get-system-drbackup",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetDrbackupSchedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify the DR Backup schedule",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "patch-system-drbackup",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemUpdateDrbackupScheduleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemUpdateDrbackupSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/dr-backups": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Display the list of created of DR Backups",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "get-system-dr-backups",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/systemGetDrbackups"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/system/configdrbackup": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Display the DR Backup configuration",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "get-system-configdrbackup",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetDrbackupConfig"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify the DR Backup configuration",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "patch-system-configdrbackup",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemUpdateDrbackupConfigRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemUpdateDrbackupConfig"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/system/telemetry": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Display the telemetry schedule information",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "get-telemetry-schedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemGetTelemetrySchedule"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Initiate POST of telemetry report",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "InitiateTelemetry",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify the telemetry schedule",
        "description": "**Only a user with security-officer role can issue this API.**",
        "operationId": "patch-telemetry-schedule",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemUpdateTelemetryScheduleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemUpdateTelemetrySchedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/clouds/accounts": {
      "get": {
        "tags": [
          "Clouds"
        ],
        "summary": "Get all cloud account information",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetClouds",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloudaccounts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Clouds"
        ],
        "summary": "Create cloud account information",
        "description": "Creates a cloud account information. **Only a user with admin role can issue this API.**",
        "operationId": "CreateCloudAccount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cloud account information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postcloudaccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloudaccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/clouds/{id}": {
      "get": {
        "tags": [
          "Clouds"
        ],
        "summary": "Get specific cloud account information",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetCloudaccountByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the cloud account to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloudaccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Clouds"
        ],
        "summary": "Update the cloud account information",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "Updatecloudaccount",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of cloud account that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attribute(s) to be update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postcloudaccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloudaccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/clouds/securityrulesupdate/enable": {
      "patch": {
        "tags": [
          "Clouds"
        ],
        "summary": "Enable cloud security rules update",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "EnableSecurityRulesUpdate",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/clouds/securityrulesupdate/disable": {
      "patch": {
        "tags": [
          "Clouds"
        ],
        "summary": "Disable cloud security rules update",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DisableSecurityRulesUpdate",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/clouds/securityrulesupdate/status": {
      "get": {
        "tags": [
          "Clouds"
        ],
        "summary": "Get the status of cloud security rules update",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetStatusOfSecurityRulesUpdate",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/securityrulesupdateobj"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/users/password-policy": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get password policy",
        "description": "**Only a user with a admin, operator or security officer role can issue this API.**",
        "operationId": "GetPasswordPolicy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGetPasswordPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update password policy",
        "description": "**Only a user with a security officer role can issue this API.**",
        "operationId": "UpdatePasswordPolicy",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attribute(s) to be update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersUpdatePasswordPolicyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersUpdatePasswordPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/reporting/reports": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get all reports",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetReports",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingGetAllReports"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Create a report",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "CreateReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create a report",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportingReportReqFlat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/reportingCreateJobsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingCreateCsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingCreateSyncReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingCreateAnalyzeReport"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/reporting/reports/export": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Export all Reports within CR software",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportReports",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/reporting/reports/preview": {
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Preview a report",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "PreviewReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create a report",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportingReportReqFlat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/reportingPreviewJobsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingPreviewCsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingPreviewAnalyzeReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingPreviewSyncReport"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/reporting/configurable": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get all configurable settings with filters of different components like jobs, capcity.",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetReportingConfigurable",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingConfigurableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/reporting/reports/{id}": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get a report",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format of report. e.g. CSV by defaul returned as JSON",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/reportingGetJobsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingGetCsReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingGetAnalyzeReport"
                    },
                    {
                      "$ref": "#/components/schemas/reportingGetSyncReport"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Reporting"
        ],
        "summary": "Delete a report",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DeleteReport",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/reporting/actions/cleanup": {
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Cleanup multiple reporting objects",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "Delete mutiple Report",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delete multiple reporting objects",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportingCleanup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/reporting/reportTemplates": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get all report templates",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "Get all ReportTemplates",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingAllReportTemplates"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/reporting/reportTemplates/{id}": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get a report template",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetReportTemplatesByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format of report. e.g. CSV by defaul returned as JSON",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/reportingJobsReportTemplate"
                    },
                    {
                      "$ref": "#/components/schemas/reportingCsReportTemplate"
                    },
                    {
                      "$ref": "#/components/schemas/reportingSyncReportTemplate"
                    },
                    {
                      "$ref": "#/components/schemas/reportingAnalyzeReportTemplate"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/reporting/settings": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get Reporting settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetReportingSettings",
        "parameters": [
          {
            "name": "X-CR-AUth-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Reporting"
        ],
        "summary": "Update Reporting settings",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "UpdateReportingSettings",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/shelteredharbor/financialinstitutions": {
      "get": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Get all financial institutions",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetFinancialInstitutions",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialinstitutions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Create a new financial institution",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "CreateFinancialInstitution",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/postFinancialInstitution"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialinstitution"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v8/shelteredharbor/financialinstitutions/{id}": {
      "get": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Get financial institution by id",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "GetFinancialInstitutionByID",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the financial institution that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialinstitution"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Update financial institution",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "UpdateFinancialInstitution",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the financial institution that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attribute(s) to be update",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/patchFinancialInstitution"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialinstitution"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Delete a financial institution",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "DeleteFinancialInstitution",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the financial institution that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/shelteredharbor/financialinstitutions/export": {
      "get": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Export all financial institutions",
        "description": "**Only a user with admin or operator role can issue this API.**",
        "operationId": "ExportFinancialInstitutions",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    },
    "/v8/shelteredharbor/license/verify": {
      "post": {
        "tags": [
          "Sheltered Harbor"
        ],
        "summary": "Verify Sheltered Harbor license",
        "description": "**Only a user with admin role can issue this API.**",
        "operationId": "VerifySHLicense",
        "parameters": [
          {
            "name": "X-CR-AUTH-TOKEN",
            "in": "header",
            "description": "Access token value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/postVerifySHLicense"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shelteredharborlicense"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "crAuthToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "hostinfopatch": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostPassword": {
            "type": "string",
            "example": "password"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "resetFP": {
            "type": "boolean",
            "description": "true if need to rest host fingerprint"
          }
        }
      },
      "hostinfo": {
        "required": [
          "hostPassword",
          "hostUsername",
          "hostname"
        ],
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostPassword": {
            "type": "string",
            "example": "password"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          }
        }
      },
      "hostinfoApps": {
        "required": [
          "hostUsername",
          "hostname"
        ],
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          }
        }
      },
      "hostinfofingerprint": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostStoreID": {
            "type": "string",
            "example": "B780E3AA7A"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          }
        }
      },
      "hostinfossh": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "hostinfosshConfig": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostStoreID": {
            "type": "string",
            "example": "0D1AA14DF9"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "authLoginUserRequestBody": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "jsmith",
            "description": "name of the user"
          },
          "password": {
            "type": "string",
            "example": "password"
          },
          "securitycode": {
            "type": "string",
            "example": "51038"
          }
        }
      },
      "authLoginUser": {
        "required": [
          "accessToken",
          "refreshToken",
          "user"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "example": "XUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU="
          },
          "accessToken": {
            "type": "string",
            "example": "XUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"
          },
          "user": {
            "$ref": "#/components/schemas/authUser"
          },
          "revokeMsg": {
            "type": "string",
            "example": "A previous session opened on Thursday, 10-Jun-21 14:54:15 EDT has been revoked."
          }
        }
      },
      "authAccessToken": {
        "required": [
          "accessToken"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "XUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"
          }
        }
      },
      "crRESTversions": {
        "type": "object",
        "properties": {
          "apiVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "buildVersion": {
            "type": "string",
            "example": "19.8.0.2-154"
          }
        }
      },
      "authGetLoginCount": {
        "required": [
          "admin",
          "dashboard",
          "name",
          "operator",
          "securityOfficer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "MaxLoginCount"
          },
          "securityOfficer": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "admin": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "operator": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "dashboard": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          }
        }
      },
      "authUpdateLoginCount": {
        "required": [
          "admin",
          "dashboard",
          "name",
          "operator",
          "securityOfficer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "MaxLoginCount"
          },
          "securityOfficer": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "admin": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "operator": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "dashboard": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          }
        }
      },
      "authUpdateLoginCountRequestBody": {
        "required": [
          "admin",
          "dashboard",
          "operator",
          "securityOfficer"
        ],
        "type": "object",
        "properties": {
          "securityOfficer": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "admin": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "operator": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "example": 3
          },
          "dashboard": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "example": 3
          }
        }
      },
      "usersGetUsers": {
        "required": [
          "count",
          "maxResults",
          "page"
        ],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/usersGetUser"
            }
          }
        }
      },
      "usersGetUser": {
        "required": [
          "email",
          "enabled",
          "id",
          "mfaEnabled",
          "pwdDaysToExpire",
          "pwdModifieDdate",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "mfaEnabled": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "security-officer",
              "admin",
              "dashboard",
              "operator"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "User that created the user",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "description": "Date user was created",
            "example": "1553876936"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date user was last modified",
            "example": "1553877050"
          },
          "pwdModifieDdate": {
            "type": "string",
            "description": "Date the password was last modified",
            "example": "1622136794"
          },
          "pwdDaysToExpire": {
            "type": "integer",
            "description": "Days remaining before password expires",
            "example": 90
          },
          "forcePwdReset": {
            "type": "boolean",
            "example": false
          },
          "pwdPolicyNonCompliant": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "description": "Last login date on CR for the user.",
            "example": "2019-04-01T16:57:44.000Z"
          },
          "settings": {
            "type": "string",
            "example": ""
          },
          "alertNotification": {
            "type": "string",
            "example": "critical"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "usersCreateUser": {
        "required": [
          "email",
          "enabled",
          "id",
          "mfaEnabled",
          "pwdDaysToExpire",
          "pwdModifieDdate",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "mfaEnabled": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "security-officer",
              "admin",
              "dashboard",
              "operator"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "User that created the user",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "description": "Date user was created",
            "example": "1553876936"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date user was last modified",
            "example": "1553877050"
          },
          "pwdModifieDdate": {
            "type": "string",
            "description": "Date the password was last modified",
            "example": "1622136794"
          },
          "pwdDaysToExpire": {
            "type": "integer",
            "description": "Days remaining before password expires",
            "example": 90
          },
          "forcePwdReset": {
            "type": "boolean",
            "example": false
          },
          "pwdPolicyNonCompliant": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "description": "Last login date on CR for the user.",
            "example": "2019-04-01T16:57:44.000Z"
          },
          "settings": {
            "type": "string",
            "example": ""
          },
          "alertNotification": {
            "type": "string",
            "example": "critical"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "usersGetUserById": {
        "required": [
          "email",
          "enabled",
          "id",
          "mfaEnabled",
          "pwdDaysToExpire",
          "pwdModifieDdate",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "mfaEnabled": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "security-officer",
              "admin",
              "dashboard",
              "operator"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "User that created the user",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "description": "Date user was created",
            "example": "1553876936"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date user was last modified",
            "example": "1553877050"
          },
          "pwdModifieDdate": {
            "type": "string",
            "description": "Date the password was last modified",
            "example": "1622136794"
          },
          "pwdDaysToExpire": {
            "type": "integer",
            "description": "Days remaining before password expires",
            "example": 90
          },
          "forcePwdReset": {
            "type": "boolean",
            "example": false
          },
          "pwdPolicyNonCompliant": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "description": "Last login date on CR for the user.",
            "example": "2019-04-01T16:57:44.000Z"
          },
          "settings": {
            "type": "string",
            "example": ""
          },
          "alertNotification": {
            "type": "string",
            "example": "critical"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "authUser": {
        "required": [
          "email",
          "enabled",
          "id",
          "mfaEnabled",
          "pwdDaysToExpire",
          "pwdModifieDdate",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "mfaEnabled": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "security-officer",
              "admin",
              "dashboard",
              "operator"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "User that created the user",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "description": "Date user was created",
            "example": "1553876936"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date user was last modified",
            "example": "1553877050"
          },
          "pwdModifieDdate": {
            "type": "string",
            "description": "Date the password was last modified",
            "example": "1622136794"
          },
          "pwdDaysToExpire": {
            "type": "integer",
            "description": "Days remaining before password expires",
            "example": 90
          },
          "forcePwdReset": {
            "type": "boolean",
            "example": false
          },
          "pwdPolicyNonCompliant": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "description": "Last login date on CR for the user.",
            "example": "2019-04-01T16:57:44.000Z"
          },
          "settings": {
            "type": "string",
            "example": ""
          },
          "alertNotification": {
            "type": "string",
            "example": "critical"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "usersUpdateUser": {
        "required": [
          "email",
          "enabled",
          "id",
          "mfaEnabled",
          "pwdDaysToExpire",
          "pwdModifieDdate",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "mfaEnabled": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "security-officer",
              "admin",
              "dashboard",
              "operator"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "User that created the user",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "description": "Date user was created",
            "example": "1553876936"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date user was last modified",
            "example": "1553877050"
          },
          "pwdModifieDdate": {
            "type": "string",
            "description": "Date the password was last modified",
            "example": "1622136794"
          },
          "pwdDaysToExpire": {
            "type": "integer",
            "description": "Days remaining before password expires",
            "example": 90
          },
          "forcePwdReset": {
            "type": "boolean",
            "example": false
          },
          "pwdPolicyNonCompliant": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "description": "Last login date on CR for the user.",
            "example": "2019-04-01T16:57:44.000Z"
          },
          "settings": {
            "type": "string",
            "example": ""
          },
          "alertNotification": {
            "type": "string",
            "example": "critical"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "usersCreateUserRequestBody": {
        "required": [
          "email",
          "password",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "jsmith"
          },
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the new user",
            "example": "password"
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "role": {
            "type": "string",
            "description": "Cyber Recovery role",
            "enum": [
              "admin",
              "security-officer",
              "dashboard"
            ]
          }
        }
      },
      "usersUpdateUserRequestBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "CR users email address, format must be user@host",
            "example": "email@dell.com"
          },
          "password": {
            "type": "string",
            "description": "Current password of the user",
            "example": "password"
          },
          "newPassword": {
            "type": "string",
            "description": "New password for the user",
            "example": "password1"
          },
          "phone": {
            "type": "string",
            "example": "239-3884"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable or Disable the user",
            "example": true
          }
        }
      },
      "usersGenerateMfaKey": {
        "required": [
          "MFAkey"
        ],
        "type": "object",
        "properties": {
          "MFAkey": {
            "type": "string",
            "example": "ZG4RLETH65K3WB5J"
          }
        }
      },
      "usersConfigureMfaRequestBody": {
        "required": [
          "securitycodeA",
          "securitycodeB"
        ],
        "type": "object",
        "properties": {
          "securitycodeA": {
            "type": "string",
            "example": "123456"
          },
          "securitycodeB": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "storageListMinimal": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageMinimal"
            }
          }
        }
      },
      "storageTreeList": {
        "required": [
          "count",
          "items",
          "page"
        ],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageTree"
            }
          }
        }
      },
      "storageCreateStorage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageCreateStorageHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mgmtddLicenses": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/storageCreateStorageLicenses"
            }
          },
          "mgmtddVersion": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "mgmtDDReplCtxStatus": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/storageReplicationContextStatus"
            }
          },
          "mgmtDDSvrDRCtxStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageServerDrContextStatus"
            }
          },
          "ddboostStatus": {
            "type": "string",
            "example": "enabled"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          }
        }
      },
      "storageCreateStorageLicenses": {
        "type": "object",
        "example": "REPLICATION"
      },
      "storageLogicalCapacity": {
        "type": "object",
        "properties": {
          "totalBytes": {
            "type": "number"
          },
          "usedBytes": {
            "type": "number"
          },
          "availableBytes": {
            "type": "number"
          },
          "usedPercentage": {
            "type": "number"
          }
        }
      },
      "storagePhysicalCapacity": {
        "type": "object",
        "properties": {
          "totalBytes": {
            "type": "number"
          },
          "usedBytes": {
            "type": "number"
          },
          "availableBytes": {
            "type": "number"
          },
          "usedPercentage": {
            "type": "number"
          }
        }
      },
      "storageFileStats": {
        "type": "object",
        "properties": {
          "totalFiles": {
            "type": "number"
          },
          "totalDirectories": {
            "type": "number"
          }
        }
      },
      "storageMtreeStats": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "deleted": {
            "type": "number"
          }
        }
      },
      "storageCreateStorageHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "storageNetworkInfo": {
        "type": "object",
        "properties": {
          "networkDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageNetworkDetails"
            }
          }
        }
      },
      "storageNetworkDetails": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string",
            "example": "ethV0"
          },
          "ip": {
            "type": "string",
            "example": "11.11.11.11"
          },
          "ipv6": {
            "type": "string",
            "example": "fe80::250:56ff:fe89:b879/64"
          },
          "interfaceSpeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "supportedSpeeds": {
            "type": "string",
            "example": "1Gbs/10Gbs"
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "hasParentInterface": {
            "type": "boolean",
            "description": "Interface is used in bonding",
            "example": false
          },
          "isParentInterface": {
            "type": "boolean",
            "description": "A bonded interface",
            "example": false
          }
        }
      },
      "storageGetConfigurableStorage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageGetConfigurableStorageHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mgmtDDReplCtxStatus": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/storageReplicationContextStatus"
            }
          },
          "mgmtDDSvrDRCtxStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageServerDrContextStatus"
            }
          },
          "mgmtddEthInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageEthInterfaces"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 1000000000
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          }
        }
      },
      "storageGetConfigurableStorageHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostStoreID": {
            "type": "string",
            "example": "****"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "storageGetAllStorages": {
        "required": [
          "count",
          "maxResults",
          "page"
        ],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageGetStorages"
            }
          }
        }
      },
      "storageGetStorages": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageGetStoragesHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mgmtDDReplCtxStatus": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/storageReplicationContextStatus"
            }
          },
          "mgmtDDSvrDRCtxStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageServerDrContextStatus"
            }
          },
          "mgmtddVersion": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 100
          },
          "mgmtddEthInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageEthInterfaces"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          }
        }
      },
      "storageReplicationContextStatus": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "example": "mtree://myHost.domain.com/data/col1/myfs-mtree-repl"
          },
          "status": {
            "type": "string",
            "example": "normal"
          },
          "rlstatus": {
            "type": "string",
            "example": "enabled"
          },
          "rlmode": {
            "type": "string",
            "example": "none"
          }
        }
      },
      "storageServerDrContextStatus": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "example": "mtree://myHost.domain.com/data/col1/myfs-mtree-repl"
          },
          "status": {
            "type": "string",
            "example": "normal"
          },
          "rlstatus": {
            "type": "string",
            "example": "enabled"
          },
          "rlmode": {
            "type": "string",
            "example": "none"
          }
        }
      },
      "storageEthInterfaces": {
        "type": "object",
        "example": "ethV0"
      },
      "storageGetStoragesHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostStoreID": {
            "type": "string",
            "example": "****"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "storageGetMtree": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddId": {
            "type": "string",
            "description": "storage resource ID",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mtreeId": {
            "type": "string",
            "description": "ID of mtree from DD",
            "example": "%2Fdata%2Fcol1%2Ftest-1"
          },
          "mtreeName": {
            "type": "string",
            "description": "Name of mtree",
            "example": "/data/col1/test-1"
          },
          "readOnlyStatus": {
            "type": "boolean",
            "description": "RO status for Mtree"
          },
          "replicationDestination": {
            "type": "boolean",
            "description": "Is Replication destination"
          },
          "rlStatus": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "rlMode": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "status": {
            "type": "string",
            "description": "status of mtree"
          },
          "purpose": {
            "type": "string",
            "description": "purpose of mtree"
          },
          "policyId": {
            "type": "string",
            "description": "policyId associated with mtree"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy"
          },
          "policyEnabled": {
            "type": "string",
            "description": "is policy enabled or not"
          },
          "policyAvailable": {
            "type": "string",
            "description": "is policy available in DD"
          },
          "retentionStatus": {
            "type": "string",
            "description": "mtree retention status"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "numCopies": {
            "type": "integer",
            "description": "number of copies"
          },
          "avgFastCopyTimeSeconds": {
            "type": "integer",
            "description": "avg FastCopy Time in Seconds"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "copyStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageCopyStats"
            }
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "quotaConfig": {
            "$ref": "#/components/schemas/storageQuotaConfig"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageQuotaConfig": {
        "type": "object",
        "properties": {
          "softLimit": {
            "type": "number"
          },
          "hardLimit": {
            "type": "number"
          }
        }
      },
      "getMtreeStats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "ddMgmtID": {
            "type": "string",
            "description": "storage resource ID",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mtreeId": {
            "type": "string",
            "description": "ID of mtree from DD",
            "example": "%2Fdata%2Fcol1%2Ftest-1"
          },
          "mtreeName": {
            "type": "string",
            "description": "Name of mtree",
            "example": "/data/col1/test-1"
          },
          "readOnlyStatus": {
            "type": "boolean",
            "description": "RO status for Mtree"
          },
          "replicationDestination": {
            "type": "boolean",
            "description": "Is Replication destination"
          },
          "rlStatus": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "rlMode": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "status": {
            "type": "string",
            "description": "status of mtree"
          },
          "purpose": {
            "type": "string",
            "description": "purpose of mtree"
          },
          "policyId": {
            "type": "string",
            "description": "policyId associated with mtree"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy"
          },
          "policyEnabled": {
            "type": "string",
            "description": "is policy enabled or not"
          },
          "policyAvailable": {
            "type": "string",
            "description": "is policy available in DD"
          },
          "retentionStatus": {
            "type": "string",
            "description": "mtree retention status"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "numCopies": {
            "type": "integer",
            "description": "number of copies"
          },
          "avgFastCopyTimeSeconds": {
            "type": "integer",
            "description": "avg FastCopy Time in Seconds"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "copyStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/copyStat"
            }
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/capacityDetails"
          },
          "quotaConfig": {
            "$ref": "#/components/schemas/quotaConfig"
          },
          "fileStats": {
            "$ref": "#/components/schemas/fileStats"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageGetStorageMtrees": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "mtrees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageGetStorageMtree"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "storageGetStorageMtree": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddId": {
            "type": "string",
            "description": "storage resource ID",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mtreeId": {
            "type": "string",
            "description": "ID of mtree from DD",
            "example": "%2Fdata%2Fcol1%2Ftest-1"
          },
          "mtreeName": {
            "type": "string",
            "description": "Name of mtree",
            "example": "/data/col1/test-1"
          },
          "readOnlyStatus": {
            "type": "boolean",
            "description": "RO status for Mtree"
          },
          "replicationDestination": {
            "type": "boolean",
            "description": "Is Replication destination"
          },
          "rlStatus": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "rlMode": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "status": {
            "type": "string",
            "description": "status of mtree"
          },
          "purpose": {
            "type": "string",
            "description": "purpose of mtree"
          },
          "policyId": {
            "type": "string",
            "description": "policyId associated with mtree"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy"
          },
          "policyEnabled": {
            "type": "string",
            "description": "is policy enabled or not"
          },
          "policyAvailable": {
            "type": "string",
            "description": "is policy available in DD"
          },
          "retentionStatus": {
            "type": "string",
            "description": "mtree retention status"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "numCopies": {
            "type": "integer",
            "description": "number of copies"
          },
          "avgFastCopyTimeSeconds": {
            "type": "integer",
            "description": "avg FastCopy Time in Seconds"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "copyStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageCopyStats"
            }
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "quotaConfig": {
            "$ref": "#/components/schemas/storageQuotaConfig"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "capacityDetails": {
        "type": "object",
        "properties": {
          "totalBytes": {
            "type": "number"
          },
          "usedBytes": {
            "type": "number"
          },
          "availableBytes": {
            "type": "number"
          },
          "usedPercentage": {
            "type": "number"
          }
        }
      },
      "fileStats": {
        "type": "object",
        "properties": {
          "totalFiles": {
            "type": "number"
          },
          "totalDirectories": {
            "type": "number"
          }
        }
      },
      "mtreeStats": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "deleted": {
            "type": "number"
          }
        }
      },
      "copyStat": {
        "type": "object",
        "properties": {
          "copyId": {
            "type": "string"
          },
          "NumFiles": {
            "type": "number"
          },
          "NumDirectories": {
            "type": "number"
          },
          "timeTaken": {
            "type": "number"
          },
          "totalFiles": {
            "type": "number"
          },
          "totalDirectories": {
            "type": "number"
          }
        }
      },
      "quotaConfig": {
        "type": "object",
        "properties": {
          "softLimit": {
            "type": "number"
          },
          "hardLimit": {
            "type": "number"
          }
        }
      },
      "storageOptions": {
        "type": "object",
        "properties": {
          "criticalSpaceUsage": {
            "type": "number"
          },
          "warningSpaceUsage": {
            "type": "number"
          }
        }
      },
      "storageGetStorage": {
        "required": [
          "id",
          "mgmtddStatus",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageGetStorageHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 100
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          }
        }
      },
      "storageGetStorageHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "postStorage": {
        "required": [
          "nickname"
        ],
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/hostinfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageUpdateStorage": {
        "required": [
          "id",
          "mgmtddStatus",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageUpdateStorageHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 100
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          }
        }
      },
      "storageUpdateStorageHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "patchStorage": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/hostinfopatch"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageMinimal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageMinimalHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddVersion": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 100
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "serialno": {
            "type": "string"
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageMinimalHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostStoreID": {
            "type": "string",
            "example": "0D1AA14DF9"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "hostFingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "storageTree": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageTreeHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddVersion": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 100
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mtrees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageMtrees"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "serialno": {
            "type": "string"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageTreeHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "storageMtrees": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddId": {
            "type": "string",
            "description": "storage resource ID",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mtreeId": {
            "type": "string",
            "description": "ID of mtree from DD",
            "example": "%2Fdata%2Fcol1%2Ftest-1"
          },
          "mtreeName": {
            "type": "string",
            "description": "Name of mtree",
            "example": "/data/col1/test-1"
          },
          "readOnlyStatus": {
            "type": "boolean",
            "description": "RO status for Mtree"
          },
          "replicationDestination": {
            "type": "boolean",
            "description": "Is Replication destination"
          },
          "rlStatus": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "rlMode": {
            "type": "string",
            "description": "RL status for Mtree"
          },
          "status": {
            "type": "string",
            "description": "status of mtree"
          },
          "purpose": {
            "type": "string",
            "description": "purpose of mtree"
          },
          "policyId": {
            "type": "string",
            "description": "policyId associated with mtree"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy"
          },
          "policyEnabled": {
            "type": "boolean",
            "description": "is policy enabled or not"
          },
          "policyAvailable": {
            "type": "boolean",
            "description": "is policy available in DD"
          },
          "retentionStatus": {
            "type": "string",
            "description": "mtree retention status"
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "numCopies": {
            "type": "integer",
            "description": "number of copies"
          },
          "avgFastCopyTimeSeconds": {
            "type": "integer",
            "description": "avg FastCopy Time in Seconds"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "copyStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageCopyStats"
            }
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "quotaConfig": {
            "$ref": "#/components/schemas/storageQuotaConfig"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageCopyStats": {
        "type": "object",
        "properties": {
          "copyId": {
            "type": "string"
          },
          "storageID": {
            "type": "string"
          },
          "NumFiles": {
            "type": "number"
          },
          "NumDirectories": {
            "type": "number"
          },
          "timeTaken": {
            "type": "number"
          },
          "totalFiles": {
            "type": "number"
          },
          "totalDirectories": {
            "type": "number"
          },
          "pgMtreeStatsId": {
            "type": "string"
          },
          "mtreeName": {
            "type": "string"
          },
          "CreationDate": {
            "type": "string"
          }
        }
      },
      "storageArlStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "readOnly": true,
            "example": "Available"
          }
        }
      },
      "storageGetStorageCapabilities": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "example": "DP4400"
          },
          "compliance": {
            "type": "string",
            "example": "Available"
          },
          "arlstatus": {
            "type": "string",
            "example": "Unavailable"
          },
          "optimizeddiffstatus": {
            "type": "string",
            "example": "Unavailable"
          },
          "fastcopyrlstatus": {
            "type": "string",
            "example": "Unavailable"
          },
          "replicationrlcstatus": {
            "type": "string",
            "example": "Unavailable"
          },
          "serialNumber": {
            "type": "string",
            "example": "ARRRRRRRRR"
          }
        }
      },
      "storageGetStorageConfig": {
        "type": "object",
        "properties": {
          "mgmtddVersion": {
            "type": "string",
            "readOnly": true,
            "example": "Data Domain OS 6.2.0.20-624005"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "mgmtddBoostUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "ddboost-user"
            }
          },
          "mgmtddDate": {
            "type": "string",
            "readOnly": true,
            "example": "Thu Oct 10 08:32:05 PDT 2019"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/storageGetStorageConfigHostInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mgmtddLicenses": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "example": "REPLICATION"
            }
          },
          "mgmtDDReplCtxStatus": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/storageReplicationContextStatus"
            }
          },
          "mgmtDDSvrDRCtxStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageServerDrContextStatus"
            }
          },
          "mgmtddEthInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storageEthInterfaces"
            }
          },
          "ddboostStatus": {
            "type": "string",
            "readOnly": true,
            "example": "enabled"
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "fileSystemCompression": {
            "type": "number",
            "example": 100
          },
          "frontEndDataProtected": {
            "type": "number",
            "example": 100
          },
          "totalFsSize": {
            "type": "number",
            "example": 100
          },
          "usedFsSize": {
            "type": "number",
            "example": 100
          },
          "availableFsSize": {
            "type": "number",
            "example": 100
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/storagePhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/storageLogicalCapacity"
          },
          "compressionFactor": {
            "type": "string",
            "example": "Ready"
          },
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "fileStats": {
            "$ref": "#/components/schemas/storageFileStats"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/storageMtreeStats"
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "options": {
            "$ref": "#/components/schemas/storageOptions"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "alerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "maxSupportedMtrees": {
            "type": "integer",
            "example": 1000000000
          },
          "serialno": {
            "type": "string"
          },
          "activeWarningAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2042"
            }
          },
          "activeCriticalAlerts": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "2043"
            }
          },
          "activeMtreeWarningAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "activeMtreeCriticalAlerts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "storageGetStorageConfigHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "actionsRequestBody": {
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          }
        }
      },
      "actionsLockRequestBody": {
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          }
        }
      },
      "appsGetApps": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsGetApp"
            }
          }
        }
      },
      "appsGetApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique application id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsGetAppHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "osType": {
            "type": "string",
            "enum": [
              "Unix",
              "Windows"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PPDM",
              "Filesystem",
              "IndexEngines",
              "Avamar",
              "NetWorker",
              "Other"
            ]
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsGetAppAppsInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "when the app resource was created",
            "readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "when the app resource was last modified",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "multilinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsGetAppMultilinks"
            }
          },
          "oidcEnabled": {
            "type": "boolean",
            "example": true
          },
          "oidcCertTimestamp": {
            "type": "string",
            "example": "2025-03-27 02:20:46.094"
          },
          "serverCertStoreID": {
            "type": "string",
            "example": ""
          },
          "recoveryData": {
            "$ref": "#/components/schemas/appsRecoveryData"
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar, PPDM, Other)"
      },
      "appsCreateApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique application id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsCreateAppHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "osType": {
            "type": "string",
            "enum": [
              "Unix",
              "Windows"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PPDM",
              "Filesystem",
              "IndexEngines",
              "Avamar",
              "NetWorker",
              "Other"
            ]
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsCreateAppAppsInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "when the app resource was created",
            "readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "when the app resource was last modified",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "multilinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsCreateAppMultilinks"
            }
          },
          "oidcEnabled": {
            "type": "boolean",
            "example": true
          },
          "oidcCertTimestamp": {
            "type": "string",
            "example": "2025-03-27 02:20:46.094"
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          },
          "serverCertStoreID": {
            "type": "string",
            "example": ""
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar, PPDM, Other)"
      },
      "appsGetAppHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "appsGetAppAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "rootstoreid": {
            "type": "string",
            "example": "2E4F2BB239"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "snapshotname": {
            "type": "string"
          },
          "lockboxstoreid": {
            "type": "string",
            "example": "4B121AB760"
          },
          "appVersion": {
            "type": "string",
            "example": "8.0.0-1.11"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "appsGetAppMultilinks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageid": {
            "type": "string",
            "description": "ID of storage asset for multilink definition",
            "example": "5ccccccccccccccccccccccc"
          },
          "users": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Degraded",
              "Failed",
              "Pending"
            ]
          },
          "resubmit": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsGetAppSingleMultilink"
            }
          }
        }
      },
      "appsGetAppSingleMultilink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageinterfacename": {
            "type": "string",
            "example": "ethV0"
          },
          "storageinterfaceip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "storageinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "csinterfacename": {
            "type": "string",
            "example": "ethV1"
          },
          "csinterfaceip": {
            "type": "string",
            "example": "10.10.10.11"
          },
          "csinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "connectivity": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Unknown"
            ]
          },
          "truelinkspeed": {
            "type": "string",
            "example": "10Gbs"
          }
        }
      },
      "appsCreateAppHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "appsCreateAppAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "rootstoreid": {
            "type": "string",
            "example": "2E4F2BB239"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "snapshotname": {
            "type": "string"
          },
          "lockboxstoreid": {
            "type": "string",
            "example": "4B121AB760"
          },
          "appVersion": {
            "type": "string",
            "example": "8.0.0-1.11"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "appsCreateAppMultilinks": {
        "type": "object",
        "properties": {
          "storageid": {
            "type": "string",
            "description": "ID of storage asset for multilink definition",
            "example": "5ccccccccccccccccccccccc"
          },
          "users": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Degraded",
              "Failed",
              "Pending"
            ]
          },
          "resubmit": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsCreateAppSingleMultilink"
            }
          }
        }
      },
      "appsCreateAppSingleMultilink": {
        "type": "object",
        "properties": {
          "storageinterfacename": {
            "type": "string",
            "example": "ethV0"
          },
          "storageinterfaceip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "storageinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "csinterfacename": {
            "type": "string",
            "example": "ethV1"
          },
          "csinterfaceip": {
            "type": "string",
            "example": "10.10.10.11"
          },
          "csinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "connectivity": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Unknown"
            ]
          },
          "truelinkspeed": {
            "type": "string",
            "example": "10Gbs"
          }
        }
      },
      "appsGetAppById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique application id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsGetAppByIdHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "osType": {
            "type": "string",
            "enum": [
              "Unix",
              "Windows"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PPDM",
              "Filesystem",
              "IndexEngines",
              "Avamar",
              "NetWorker",
              "Other"
            ]
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsGetAppByIdAppsInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "when the app resource was created",
            "readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "when the app resource was last modified",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "multilinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsGetAppByIdMultilinks"
            }
          },
          "oidcEnabled": {
            "type": "boolean",
            "example": true
          },
          "oidcCertTimestamp": {
            "type": "string",
            "example": "2025-03-27 02:20:46.094"
          },
          "recoveryData": {
            "$ref": "#/components/schemas/appsRecoveryData"
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar, PPDM, Other)"
      },
      "appsGetAppByIdHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "appsGetAppByIdAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "rootstoreid": {
            "type": "string",
            "example": "2E4F2BB239"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "snapshotname": {
            "type": "string"
          },
          "lockboxstoreid": {
            "type": "string",
            "example": "4B121AB760"
          },
          "appVersion": {
            "type": "string",
            "example": "8.0.0-1.11"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "appsGetAppByIdMultilinks": {
        "type": "object",
        "properties": {
          "storageid": {
            "type": "string",
            "description": "ID of storage asset for multilink definition",
            "example": "5ccccccccccccccccccccccc"
          },
          "users": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Degraded",
              "Failed",
              "Pending"
            ]
          },
          "resubmit": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsGetAppByIdSingleMultilink"
            }
          }
        }
      },
      "appsGetAppByIdSingleMultilink": {
        "type": "object",
        "properties": {
          "storageinterfacename": {
            "type": "string",
            "example": "ethV0"
          },
          "storageinterfaceip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "storageinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "csinterfacename": {
            "type": "string",
            "example": "ethV1"
          },
          "csinterfaceip": {
            "type": "string",
            "example": "10.10.10.11"
          },
          "csinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "connectivity": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Unknown"
            ]
          },
          "truelinkspeed": {
            "type": "string",
            "example": "10Gbs"
          }
        }
      },
      "appsUpdateApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique application id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsUpdateAppHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "osType": {
            "type": "string",
            "enum": [
              "Unix",
              "Windows"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PPDM",
              "Filesystem",
              "IndexEngines",
              "Avamar",
              "NetWorker",
              "Other"
            ]
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsUpdateAppAppsInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "when the app resource was created",
            "readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "when the app resource was last modified",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "multilinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsUpdateAppMultilinks"
            }
          },
          "oidcEnabled": {
            "type": "boolean",
            "example": true
          },
          "oidcCertTimestamp": {
            "type": "string",
            "example": "2025-03-27 02:20:46.094"
          },
          "recoveryData": {
            "$ref": "#/components/schemas/appsRecoveryData"
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          },
          "serverCertStoreID": {
            "type": "string",
            "example": ""
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar, PPDM, Other)"
      },
      "appsUpdateAppHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostSSHKeyId": {
            "type": "string",
            "example": "162099491064v9650507"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "hostType": {
            "type": "integer",
            "example": 100
          },
          "resetFP": {
            "type": "boolean"
          }
        }
      },
      "appsUpdateAppAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "rootstoreid": {
            "type": "string",
            "example": "2E4F2BB239"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "snapshotname": {
            "type": "string"
          },
          "lockboxstoreid": {
            "type": "string",
            "example": "4B121AB760"
          },
          "appVersion": {
            "type": "string",
            "example": "8.0.0-1.11"
          }
        }
      },
      "appsUpdateAppMultilinks": {
        "type": "object",
        "properties": {
          "storageid": {
            "type": "string",
            "description": "ID of storage asset for multilink definition",
            "example": "5ccccccccccccccccccccccc"
          },
          "users": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Degraded",
              "Failed",
              "Pending"
            ]
          },
          "resubmit": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsUpdateAppSingleMultilink"
            }
          }
        }
      },
      "appsUpdateAppSingleMultilink": {
        "type": "object",
        "properties": {
          "storageinterfacename": {
            "type": "string",
            "example": "ethV0"
          },
          "storageinterfaceip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "storageinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "csinterfacename": {
            "type": "string",
            "example": "ethV1"
          },
          "csinterfaceip": {
            "type": "string",
            "example": "10.10.10.11"
          },
          "csinterfacespeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "connectivity": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive",
              "Unknown"
            ]
          },
          "truelinkspeed": {
            "type": "string",
            "example": "10Gbs"
          }
        }
      },
      "appsCreateAppRequestBody": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsCreateAppRequestBodyHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "osType": {
            "type": "string",
            "enum": [
              "Unix",
              "Windows"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PPDM",
              "Filesystem",
              "IndexEngines",
              "Avamar",
              "NetWorker",
              "Other"
            ]
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsCreateAppRequestBodyAppsInfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tag-2"
            ],
            "items": {
              "type": "string"
            }
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar, PPDM, Other)"
      },
      "appsCreateAppRequestBodyHostInfo": {
        "required": [
          "hostPassword",
          "hostUsername",
          "hostname"
        ],
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostPassword": {
            "type": "string",
            "example": "password",
            "description": "Required for Filesystem, NetWorker, Avamar, PPDM and Other"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          }
        }
      },
      "appsCreateAppRequestBodyAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "example": "password",
            "description": "Required for IndexEngine, NetWorker, PPDM"
          },
          "rootpassword": {
            "type": "string",
            "example": "password"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "lockboxpassword": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "appsUpdateAppRequestBody": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "application resource name",
            "example": "myPPDMApp"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/appsUpdateAppRequestBodyHostInfo"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the (stuff) will be mounted",
            "example": "/cr/mnt"
          },
          "appsinfo": {
            "$ref": "#/components/schemas/appsUpdateAppRequestBodyAppsInfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "multilinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsUpdateAppRequestBodyMultilinks"
            }
          },
          "serverCert": {
            "type": "string",
            "description": "Server certificate field is required only for Cyber Sense.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIDYjCCAkoCFBvwIcYJ9sYU/mkM9XGRYZ2anaCtMA0GCSqGSIb3DQEBCwUAMIGY\nMQswCQYDVQQGEwJVUzETMBEGA1UECAwKTmV3IEplcnNleTEQMA4GA1UEBwwHSG9s\nbWRlbDEcMBoGA1UECgwTSW5kZXggRW5naW5lcywgSW5jLjEbMBkGA1UEAwwSKi5p\nbmRleGVuZ2luZXMuY29tMScwJQYJKoZIhvcNAQkBFhhzdXBwb3J0QGluZGV4ZW5n\naW5lcy5jb20wHhcNMjUwMTI4MjIyNjMzWhcNMzAwMTI3MjIyNjMzWjBCMQswCQYD\nVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZhdWx0\nIENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtAIn\ny9o6gXzerBJscF6yCyttkhVFqyTYp5qYidDBaHUQRBuTzGUPttz6z3VY9bEHAq96\nSfIydmxaRmwSU8yZ+8tAnT6rAhLcTXQEH/bK9ZRSWwVses0N+11KLjPjqOMTKruj\n9st0/yPwkRZkpnHNzxvBOj6z/CUxKVIt88Myb+hlzyGXcg7VkXM2unq7EmLusz9N\ngb968u9qUe0FfIbMdNGXaJliRaTKYg2hcurqjYcGScDppZ0OzCrjIPwOTJIlgwYe\nB+kgGpsJer5sJtpdRPEQZtPmTeGIQ86pgb6m/i8wzogtn0LWhOJmy0D/xyNBZWPC\neRwavlkDcayuDU/y7QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAJLBc7MFxQrS/7\npil95uV72Am6LLubiXT6ZfwkKEw9cny3wuUj2EXuqEULhhQ9qu2CwyFv/BdN02Hh\n0ljjRMrv7x7iVZd+ESCDGjdx9NNjpO0wUXjry2E/YTiC1Y5zYnop/9zUbIv6pQQk\ndRmlkein+t0junSs6PFrIqUsxQ0O0Mc5qCUTMMLlJYvjknpYvFqE6EXetYXwqGE/\niRPdteO8Yph0lQuIRpIS5PF2NrbOLnPFhMbGA1wyOW7pLkDuT3w64zfZhucIWuyY\nEADyqTC6ssZllkK+E6ueIzKqJ8U2FmkhYFRW9LGUZG4mHypeaY1hZfU+zG668U4O\n6iDR/BBf\n-----END CERTIFICATE-----\n"
          }
        },
        "description": "An application known to Cyber Recovery (eg. IndexEngine, Filesystem, NetWorker, Avamar)"
      },
      "appsUpdateAppRequestBodyHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostUsername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostPassword": {
            "type": "string",
            "example": "password",
            "description": "Required for Filesystem, NetWorker, Avamar, PPDM and Other"
          },
          "sshPort": {
            "type": "integer",
            "example": 22
          },
          "resetFP": {
            "type": "boolean",
            "description": "true if need to rest host fingerprint"
          }
        }
      },
      "appsUpdateAppRequestBodyAppsInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "example": "password",
            "description": "Required for IndexEngine, NetWorker, PPDM"
          },
          "rootpassword": {
            "type": "string",
            "example": "password"
          },
          "vcenterid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "lockboxpassword": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "appsUpdateAppRequestBodyMultilinks": {
        "type": "object",
        "properties": {
          "storageID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "resubmit": {
            "type": "boolean",
            "description": "Resubmit a failed object",
            "example": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsUpdateAppRequestBodySingleMultilink"
            }
          }
        }
      },
      "appsUpdateAppRequestBodySingleMultilink": {
        "type": "object",
        "properties": {
          "storageInterfaceName": {
            "type": "string",
            "example": "ethV0"
          },
          "storageInterfaceIP": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "csInterfaceName": {
            "type": "string",
            "example": "ethV1"
          },
          "csInterfaceIP": {
            "type": "string",
            "example": "10.10.10.11"
          }
        }
      },
      "multilinkNetInterface": {
        "type": "object",
        "properties": {
          "CSNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsCsNetInterfaces"
            }
          },
          "StorageNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsStorageNetInterfaces"
            }
          }
        }
      },
      "appsGetMultilinkNetInterfaces": {
        "type": "object",
        "properties": {
          "csNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsCsNetInterfaces"
            }
          },
          "storageNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsStorageNetInterfaces"
            }
          }
        }
      },
      "appsCsNetInterfaces": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string",
            "example": "ethV0"
          },
          "ip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "ipv6": {
            "type": "string",
            "example": "fe80::250:56ff:fe89:3fee%ethV0"
          },
          "interfaceSpeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "supportedSpeeds": {
            "type": "string",
            "example": "1Gbs/10Gbs"
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          }
        }
      },
      "appsStorageNetInterfaces": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "example": "myStorage"
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appsStorageNetInterface"
            }
          }
        }
      },
      "appsStorageNetInterface": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string",
            "example": "ethV0"
          },
          "ip": {
            "type": "string",
            "example": "11.11.11.11"
          },
          "ipv6": {
            "type": "string",
            "example": "fe80::250:56ff:fe89:b879/64"
          },
          "interfaceSpeed": {
            "type": "string",
            "example": "10Gbs"
          },
          "supportedSpeeds": {
            "type": "string",
            "example": "1Gbs/10Gbs"
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "hasParentInterface": {
            "type": "boolean",
            "description": "Interface is used in bonding",
            "example": false
          },
          "isParentInterface": {
            "type": "boolean",
            "description": "A bonded interface",
            "example": false
          }
        }
      },
      "appsRecoveryData": {
        "type": "object",
        "properties": {
          "configType": {
            "type": "string",
            "example": "STANDALONE"
          },
          "metadataTimestamp": {
            "type": "string",
            "example": "2025-02-07T03:54:07.911Z"
          },
          "prodAppName": {
            "type": "string",
            "example": "AppName"
          }
        }
      },
      "policiesGetPolicies": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetPolicy"
            }
          }
        }
      },
      "policiesUpdatePolicy": {
        "required": [
          "policyName",
          "replType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the policy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "replType": {
            "type": "string",
            "description": "Type of replication being performed",
            "example": "DD"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "creationDate": {
            "type": "string",
            "description": "Time when the policy was created"
          },
          "modifiedDate": {
            "type": "string",
            "description": "last time the resource was modified"
          },
          "createdBy": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "numCopies": {
            "type": "integer",
            "example": 5
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesUpdatePolicyAssetDetails"
            }
          },
          "lastJob": {
            "type": "string",
            "description": "the name of the last job that ran",
            "example": "sync-copy-lock_1587"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "bypasssyntheticoptim": {
            "type": "string"
          },
          "analyzeindexasid": {
            "type": "string"
          },
          "deprecationMsg": {
            "type": "string"
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesGetPolicyById": {
        "required": [
          "policyName",
          "replType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the policy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "replType": {
            "type": "string",
            "description": "Type of replication being performed",
            "example": "DD"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "creationDate": {
            "type": "string",
            "description": "Time when the policy was created"
          },
          "modifiedDate": {
            "type": "string",
            "description": "last time the resource was modified"
          },
          "createdBy": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "numCopies": {
            "type": "integer",
            "example": 5
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesGetPolicyByIdAssetDetails"
            }
          },
          "lastJob": {
            "type": "string",
            "description": "the name of the last job that ran",
            "example": "sync-copy-lock_1587"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "bypasssyntheticoptim": {
            "type": "string"
          },
          "analyzeindexasid": {
            "type": "string"
          },
          "deprecationMsg": {
            "type": "string"
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesGetPolicy": {
        "required": [
          "policyName",
          "replType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the policy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "replType": {
            "type": "string",
            "description": "Type of replication being performed",
            "example": "DD"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "creationDate": {
            "type": "string",
            "description": "Time when the policy was created"
          },
          "modifiedDate": {
            "type": "string",
            "description": "last time the resource was modified"
          },
          "createdBy": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "numCopies": {
            "type": "integer",
            "example": 5
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesGetPolicyAssetDetails"
            }
          },
          "lastJob": {
            "type": "string",
            "description": "the name of the last job that ran",
            "example": "sync-copy-lock_1587"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "bypasssyntheticoptim": {
            "type": "string"
          },
          "analyzeindexasid": {
            "type": "string"
          },
          "deprecationMsg": {
            "type": "string"
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesCreatePolicy": {
        "required": [
          "policyName",
          "replType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the policy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "replType": {
            "type": "string",
            "description": "Type of replication being performed",
            "example": "DD"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "creationDate": {
            "type": "string",
            "description": "Time when the policy was created"
          },
          "modifiedDate": {
            "type": "string",
            "description": "last time the resource was modified"
          },
          "createdBy": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "numCopies": {
            "type": "integer",
            "example": 5
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesCreatePolicyAssetDetails"
            }
          },
          "lastJob": {
            "type": "string",
            "description": "the name of the last job that ran",
            "example": "sync-copy-lock_1587"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "bypasssyntheticoptim": {
            "type": "string"
          },
          "analyzeindexasid": {
            "type": "string"
          },
          "deprecationMsg": {
            "type": "string"
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesCreatePolicyRequestBody": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "replType": {
            "type": "string",
            "description": "Type of replication being performed",
            "example": "DD"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesCreatePolicyRequestAssetDetails"
            }
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesUpdatePolicyRequestBody": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "jobWindow": {
            "maximum": 24,
            "minimum": 0,
            "type": "integer",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 6
          },
          "retLockType": {
            "type": "string",
            "description": "What kind of retlock governance or compliance",
            "example": "governance",
            "enum": [
              "none",
              "governance",
              "governance-disabled",
              "compliance"
            ]
          },
          "retLockMin": {
            "type": "string",
            "description": "policy level retention lock minimum",
            "example": "2d"
          },
          "retLockMax": {
            "type": "string",
            "description": "policy level retention lock maximum",
            "example": "40d"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable and disable a policy",
            "example": true
          },
          "assetDetails": {
            "type": "array",
            "description": "an array of asset details for this policy",
            "items": {
              "$ref": "#/components/schemas/policiesUpdatePolicyRequestBodyAssetDetails"
            }
          },
          "tags": {
            "type": "array",
            "description": "user defined tags or keywords",
            "example": [
              "networker",
              "finance",
              "CRM"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The what, where, how and when"
      },
      "policiesUpdatePolicyAssetDetails": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "policyid": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "5eeeeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesGetPolicyByIdAssetDetails": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "5eeeeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesGetPolicyAssetDetails": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "policyid": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "5eeeeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesCreatePolicyAssetDetails": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "policyid": {
            "type": "string",
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "5eeeeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesCreatePolicyRequestAssetDetails": {
        "required": [
          "mgmtddid",
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface",
          "contentType",
          "status",
          "rlmode",
          "rlstatus",
          "checked"
        ],
        "type": "object",
        "properties": {
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "contentType": {
            "type": "string",
            "description": "content type",
            "example": "data"
          },
          "status": {
            "type": "string",
            "description": "status",
            "example": "normal"
          },
          "rlmode": {
            "type": "string",
            "description": "retention lock mode",
            "example": "none"
          },
          "rlstatus": {
            "type": "string",
            "description": "retention lock status",
            "example": "disabled"
          },
          "checked": {
            "type": "boolean",
            "description": "checked",
            "example": true
          }
        }
      },
      "policiesUpdatePolicyRequestBodyAssetDetails": {
        "required": [
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          }
        }
      },
      "actionSCL": {
        "required": [
          "policyID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "7d"
          }
        }
      },
      "actionsSecureCopyAnalyzeRequestBody": {
        "required": [
          "appID",
          "policyID"
        ],
        "type": "object",
        "properties": {
          "appID": {
            "type": "string",
            "description": "the ID of the app",
            "example": "6ccccccccccccccccccccccc"
          },
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "14"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          }
        }
      },
      "actionsAnalyzeRequestBody": {
        "required": [
          "appID",
          "copyID",
          "policyID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "acccccccccccccccccccccc"
          },
          "appID": {
            "type": "string",
            "description": "the ID of the application to perform the analysis",
            "example": "fcccccccccccccccccccccc"
          },
          "includefiles": {
            "type": "array",
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "14"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "mtreeContentFormat": {
            "type": "string",
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          }
        }
      },
      "actionsRecoverAppRequestBody": {
        "required": [
          "appID",
          "copyID",
          "policyID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "5cccccccccccccccccccccc"
          },
          "appID": {
            "type": "string",
            "description": "the ID of the application where the recovery will be performed",
            "example": "5cccccccccccccccccccccd"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "storagePassword": {
            "type": "string",
            "description": "ddboost storage user Password",
            "example": "Password123!"
          },
          "bootstrapFolder": {
            "type": "string",
            "description": "folder used as bootstrap device in Networker server backup",
            "example": "Sys-Device"
          }
        }
      },
      "actionsLinkedRecoveryRequestBody": {
        "required": [
          "appID",
          "copyID",
          "policyID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "5cccccccccccccccccccccc"
          },
          "appID": {
            "type": "string",
            "description": "the ID of the application where the recovery will be performed",
            "example": "5cccccccccccccccccccccd"
          }
        }
      },
      "actionsRecoveryCheckRequestBody": {
        "required": [
          "appID",
          "copyID",
          "policyID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "5cccccccccccccccccccccc"
          },
          "appID": {
            "type": "string",
            "description": "the ID of the application where the recovery will be performed",
            "example": "5cccccccccccccccccccccd"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "storagePassword": {
            "type": "string",
            "description": "ddboost storage user Password",
            "example": "Password123!"
          },
          "bootstrapFolder": {
            "type": "string",
            "description": "folder used as bootstrap device in Networker server backup",
            "example": "Sys-Device"
          }
        }
      },
      "actionsRecoverToAltRequestBody": {
        "required": [
          "copyID",
          "policyID",
          "recoveryMtree",
          "recoveryEthPort"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the ID of the copy",
            "example": "5cccccccccccccccccccccc"
          },
          "recoveryMtree": {
            "type": "string",
            "description": "source of mtree of replication context where the recovery will be performed",
            "example": "/data/col1/cyber-recovery-restore"
          },
          "recoveryEthPort": {
            "type": "string",
            "description": "DD replication ethernet interface",
            "example": "ethV1"
          }
        }
      },
      "actionsReverseSyncRequestBody": {
        "required": [
          "reverseSyncEthPort",
          "reverseSyncMtree",
          "storageId"
        ],
        "type": "object",
        "properties": {
          "reverseSyncMtree": {
            "type": "string",
            "description": "source mtree(vault) of replication context where the sync will be performed",
            "example": "/data/col1/cyber-recovery-reverse-sync"
          },
          "reverseSyncEthPort": {
            "type": "string",
            "description": "DD replication ethernet interface",
            "example": "ethV1"
          },
          "storageId": {
            "type": "string",
            "description": "unique id to identify vault DD",
            "example": "5cccccccccccccccccccccc"
          }
        }
      },
      "actionsCreateSandboxRequestBody": {
        "required": [
          "copyID",
          "policyID",
          "sandboxName",
          "appID"
        ],
        "type": "object",
        "properties": {
          "policyID": {
            "type": "string",
            "description": "the ID of the policy",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "From which to create a recovery sandbox",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxName": {
            "type": "string",
            "description": "name for the sandbox mtree to be created",
            "example": "sbox1"
          },
          "appID": {
            "type": "string",
            "description": "ID of the app to use for this request (overrides apphostname)",
            "example": "5cccccccccccccccccccccc"
          },
          "mountAction": {
            "type": "string",
            "description": "whether to mount the recovery sandbox to app",
            "example": "true"
          },
          "mountPoint": {
            "type": "string",
            "description": "where the sandbox is mounted",
            "example": "/sb-mnt1"
          }
        }
      },
      "job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5cccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobTask"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/jobStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/jobAction"
          }
        }
      },
      "policiesDeleteSandbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "deletesandbox_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "deletesandbox"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app",
            "example": "6ccccccccccccccccccccccc"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "jobStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/jobStorageDD"
          },
          "forcemanuallock": {
            "type": "boolean"
          },
          "jobspecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobspecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retlockautomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retlockduration": {
            "type": "string"
          },
          "retlockmax": {
            "type": "string"
          },
          "retlockmin": {
            "type": "string"
          },
          "retlocktype": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          },
          "copiesWithData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/copiesWithData"
            }
          },
          "uberCopies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "copiesWithData": {
        "type": "object",
        "properties": {
          "copyID": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          }
        }
      },
      "policiesGetCopyDetails": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "parentcopy": {
            "$ref": "#/components/schemas/policiesGetCopyDetail"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "jobStorageDD": {
        "type": "object",
        "properties": {
          "createdby": {
            "type": "string"
          },
          "creationdate": {
            "type": "string"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/jobHostInfossh"
          },
          "id": {
            "type": "string"
          },
          "mgmtddstatus": {
            "type": "string"
          },
          "modifieddate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string"
          }
        }
      },
      "jobspecs": {
        "type": "object",
        "properties": {
          "contenttype": {
            "type": "string"
          },
          "firewallpath": {
            "type": "string"
          },
          "mgmtddreplctxname": {
            "type": "string"
          },
          "mgmtddreplethinterface": {
            "type": "string"
          },
          "sourceddreplctxname": {
            "type": "string"
          },
          "sourceserverdrsystem": {
            "type": "string"
          },
          "sourcestoragegid": {
            "type": "string"
          },
          "sourcestorageuid": {
            "type": "string"
          }
        }
      },
      "jobHostInfossh": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostusername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostsshkeyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "hostfingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshport": {
            "type": "integer",
            "example": 22
          },
          "hosttype": {
            "type": "integer",
            "example": 100
          },
          "hostfp": {
            "type": "string"
          },
          "hoststoreid": {
            "type": "string"
          }
        }
      },
      "policiesGetJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageID": {
            "type": "string",
            "description": "The ID of the storage"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "string",
            "description": "User requested job",
            "example": "copy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app",
            "example": "5ccccccccccccccccccccccc"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "jobWindow": {
            "type": "integer",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "storagePwId": {
            "type": "string"
          }
        }
      },
      "policiesPostAnalysisReport": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "jobAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "actiondata": {
            "type": "object",
            "properties": {
              "csnstorageInterfaces": {
                "$ref": "#/components/schemas/multilinkNetInterface"
              },
              "multilinkObjsToCreate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/appsGetAppByIdMultilinks"
                }
              },
              "multilinkObjsToDelete": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/appsGetAppByIdMultilinks"
                }
              },
              "multilinkObjsToRetry": {
                "type": "string",
                "example": null
              },
              "multilinkObjsToUpdate": {
                "type": "string",
                "example": null
              }
            }
          },
          "policyID": {
            "type": "string"
          },
          "copyID": {
            "type": "string",
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          }
        }
      },
      "jobTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "order": {
            "type": "number",
            "example": 1
          },
          "jobID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "svcName": {
            "type": "string",
            "description": "Name of the microservice performing the task",
            "example": "mgmtdds"
          },
          "taskAction": {
            "type": "string",
            "description": "Type of task action to run",
            "example": "sandbox-create"
          },
          "resumable": {
            "type": "boolean"
          },
          "taskStatus": {
            "type": "string",
            "example": "Success"
          },
          "taskStatusDetail": {
            "type": "string",
            "description": "Task status details",
            "example": "Task completed successfully."
          },
          "taskProgress": {
            "type": "number",
            "example": 100
          },
          "taskWeight": {
            "type": "number",
            "example": 100
          },
          "startTime": {
            "type": "string",
            "example": "1690531200"
          },
          "endTime": {
            "type": "string",
            "example": "1690531200"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "task1": {
        "type": "object",
        "properties": {
          "svcname": {
            "type": "string",
            "description": "name of the microservice performing the task",
            "example": "mgmtdds"
          },
          "taskAction": {
            "type": "string",
            "description": "type of task action to run",
            "example": "sandbox-create"
          },
          "taskStatus": {
            "type": "string",
            "description": "task status",
            "example": "Running"
          }
        }
      },
      "task2": {
        "type": "object",
        "properties": {
          "Svcname": {
            "type": "string",
            "description": "name of the microservice performing the task",
            "example": "apps"
          },
          "TaskAction": {
            "type": "string",
            "description": "type of task action to run",
            "example": "mount"
          }
        }
      },
      "actionsSyncCopy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "sync-copy_8321C5"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "sync-copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsSyncCopyStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsSyncCopyStorageData": {
        "type": "object",
        "properties": {
          "dd": {
            "$ref": "#/components/schemas/actionsSyncCopyDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsSyncCopyJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsSyncCopyJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsSyncCopyDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsSync": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "sync_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "sync"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsSyncStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Details about the recent job status."
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsSyncStorageData": {
        "type": "object",
        "properties": {
          "dd": {
            "$ref": "#/components/schemas/actionsSyncDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsSyncJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsSyncJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsSyncDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsSecureCopy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "securecopy_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "securecopy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsSecureCopyStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Details about the recent job status."
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsSecureCopyStorageData": {
        "type": "object",
        "properties": {
          "dd": {
            "$ref": "#/components/schemas/actionsSecureCopyDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsSecureCopyJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsSecureCopyJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsSecureCopyDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "policiesCreateSandboxJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "sandbox-create_CCDFF2"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "createsandbox"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "actionsSecureCopyAnalyze": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "securecopyanalyze_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "securecopy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsSecureCopyAnalyzeStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsSecureCopyAnalyzeStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/actionsSecureCopyAnalyzeSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "continuoussync": {
            "type": "string"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsSecureCopyAnalyzeJobSpecs"
            }
          },
          "dd": {
            "$ref": "#/components/schemas/actionsSecureCopyAnalyzeDD"
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsSecureCopyAnalyzeSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsSecureCopyAnalyzeJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsSecureCopyAnalyzeDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsRecoveryCheck": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverycheck_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverycheck"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsRecoveryCheckStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "storagePwId": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsRecoveryCheckStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/actionsRecoveryCheckSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsRecoveryCheckSubSandboxes"
            }
          }
        }
      },
      "actionsRecoveryCheckSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsRecoveryCheckSubSandboxes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "jobid": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "policiesGetJobsCount": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "total job counts",
            "example": 10
          },
          "runningCount": {
            "type": "integer",
            "description": "total running job counts",
            "example": 2
          },
          "successCount": {
            "type": "integer",
            "description": "total success job counts",
            "example": 3
          },
          "warningCount": {
            "type": "integer",
            "description": "total warning job counts",
            "example": 2
          },
          "criticalCount": {
            "type": "integer",
            "description": "total critical job counts",
            "example": 2
          },
          "canceledCount": {
            "type": "integer",
            "description": "total canceled job counts",
            "example": 1
          },
          "protectionCount": {
            "type": "integer",
            "description": "total protection job counts",
            "example": 1
          },
          "systemCount": {
            "type": "integer",
            "description": "total system job counts",
            "example": 1
          },
          "recoveryCount": {
            "type": "integer",
            "description": "total recovery job counts",
            "example": 1
          },
          "cancelingCount": {
            "type": "integer",
            "description": "total canceling job counts",
            "example": 1
          }
        }
      },
      "policiesCopyJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "copy_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesSyncCopyJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "sync-copy_8321C5"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "sync-copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesSyncJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "sync_8321C5"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "syncopy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesSecureCopyJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "securecopy_890661"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "securecopy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesSecureCopyAnalyzeJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "securecopyanalyze_789987"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "securecopy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          }
        }
      },
      "policiesCopyJobDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/policiesCopyJobHostInfo"
          },
          "id": {
            "type": "string"
          },
          "mgmtddstatus": {
            "type": "string"
          },
          "modifieddate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string"
          },
          "createdby": {
            "type": "string"
          },
          "creationdate": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "policiesCopyJobHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostusername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostsshkeyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "hostfingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshport": {
            "type": "integer",
            "example": 22
          },
          "hosttype": {
            "type": "integer",
            "example": 100
          },
          "hostfp": {
            "type": "string"
          },
          "hoststoreid": {
            "type": "string"
          }
        }
      },
      "policiesCopyJobJobspecs": {
        "type": "object",
        "properties": {
          "contenttype": {
            "type": "string"
          },
          "firewallpath": {
            "type": "string"
          },
          "mgmtddreplctxname": {
            "type": "string"
          },
          "mgmtddreplethinterface": {
            "type": "string"
          },
          "sourceddreplctxname": {
            "type": "string"
          },
          "sourceserverdrsystem": {
            "type": "string"
          },
          "sourcestoragegid": {
            "type": "string"
          },
          "sourcestorageuid": {
            "type": "string"
          }
        }
      },
      "actionsCopy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "copy_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsCopyStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsCopyStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionsCopyDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsCopyJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsCopyDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostusername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostsshkeyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "hostfingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshport": {
            "type": "integer",
            "example": 22
          },
          "hosttype": {
            "type": "integer",
            "example": 100
          },
          "hostfp": {
            "type": "string"
          },
          "hoststoreid": {
            "type": "string"
          }
        }
      },
      "actionsPhysicalCapacity": {
        "type": "object",
        "properties": {
          "totalBytes": {
            "type": "number"
          },
          "usedBytes": {
            "type": "number"
          },
          "availableBytes": {
            "type": "number"
          },
          "usedPercentage": {
            "type": "number"
          }
        }
      },
      "actionsLogicalCapacity": {
        "type": "object",
        "properties": {
          "totalBytes": {
            "type": "number"
          },
          "usedBytes": {
            "type": "number"
          },
          "availableBytes": {
            "type": "number"
          },
          "usedPercentage": {
            "type": "number"
          }
        }
      },
      "actionsFileStats": {
        "type": "object",
        "properties": {
          "totalFiles": {
            "type": "number"
          },
          "totalDirectories": {
            "type": "number"
          }
        }
      },
      "actionsMtreeStats": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "deleted": {
            "type": "number"
          }
        }
      },
      "actionsCopyJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsCopyLock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "copy-lock_123098"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy-lock"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsCopyLockStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsCopyLockStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionsCopyLockDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsCopyLockJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsCopyLockJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsCopyLockDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsLock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "lock_623056"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "lock"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsLockStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsLockStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionsLockDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsLockJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsLockJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "actionsLockDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsReverseSync": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "reverseSync_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "reverseSync"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who  created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsReverseSyncStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          },
          "appData": {
            "$ref": "#/components/schemas/actionsReverseSyncAppdata"
          }
        }
      },
      "actionsAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "copyID": {
            "type": "string",
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          },
          "sandboxName": {
            "type": "string"
          },
          "mtreeContentFormat": {
            "type": "string"
          },
          "mountAction": {
            "type": "string"
          },
          "storageUser": {
            "type": "string"
          },
          "storagePassword": {
            "type": "string"
          },
          "storageId": {
            "type": "string"
          },
          "recoveryMtree": {
            "type": "string"
          },
          "recoveryEthPort": {
            "type": "string"
          },
          "reverseSyncMtree": {
            "type": "string"
          },
          "reverseSyncEthPort": {
            "type": "string"
          },
          "bootstrapFolder": {
            "type": "string"
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "14"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          }
        }
      },
      "actionsTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "svcName": {
            "type": "string",
            "description": "Name of the microservice performing the task",
            "example": "mgmtdds"
          },
          "taskAction": {
            "type": "string",
            "description": "Type of task action to run",
            "example": "sandbox-create"
          },
          "resumable": {
            "type": "boolean"
          },
          "taskStatus": {
            "type": "string",
            "example": "Success"
          },
          "taskStatusDetail": {
            "type": "string",
            "description": "Task status details",
            "example": "Task completed successfully."
          },
          "taskProgress": {
            "type": "number",
            "example": 100
          },
          "order": {
            "type": "number",
            "example": 1
          },
          "jobID": {
            "type": "string",
            "description": "The ID of the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "taskWeight": {
            "type": "number",
            "example": 100
          },
          "startTime": {
            "type": "string",
            "example": "1690531200"
          },
          "endTime": {
            "type": "string",
            "example": "1690531200"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "taskActionDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasksTaskActionDataList"
            }
          }
        }
      },
      "actionsTasksTaskActionDataList": {
        "type": "object",
        "properties": {
          "vaultDDReplCtx": {
            "type": "string"
          },
          "sourceDDReplCtx": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "vaultDDReplEthInterface": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtId": {
            "type": "string"
          },
          "ddMgmtNickName": {
            "type": "string"
          },
          "syncProgress": {
            "type": "number"
          },
          "syncMTreeReplStatus": {
            "type": "string"
          }
        }
      },
      "actionsReverseSyncAppdata": {
        "type": "object",
        "properties": {
          "reverseSyncContextDestMtree": {
            "type": "string"
          },
          "reverseSyncEthPort": {
            "type": "string"
          },
          "vaultID": {
            "type": "string"
          },
          "reverseSyncMtree": {
            "type": "string"
          }
        }
      },
      "actionsReverseSyncStorageData": {
        "type": "object",
        "properties": {
          "dd": {
            "$ref": "#/components/schemas/actionsReverseSyncDD"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsReverseSyncJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsReverseSyncJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsReverseSyncDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "daily_copy"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobTask"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionJobStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/jobAction"
          }
        }
      },
      "actionJobs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "copy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobTask"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/createSandboxJobStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/createSandboxJobAction"
          }
        }
      },
      "actionJobStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionJobStorageDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "storageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostnamestoexport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/sandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionJobStorageDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionJobStorageDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/fileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/jobHostInfossh"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/capacityDetails"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/mtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/capacityDetails"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "createsandboxJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "sandbox-create_5B2C8A"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "createsandbox"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobTask"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/jobStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/createSandboxJobAction"
          }
        }
      },
      "createSandboxJobStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostnamestoexport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/sandboxData"
          },
          "sandboxdata": {
            "$ref": "#/components/schemas/sandboxdata"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sandboxData"
            }
          },
          "subsandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sandboxData"
            }
          }
        }
      },
      "sandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "createSandboxJobAction": {
        "type": "object",
        "properties": {
          "request": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "copyID": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "sandboxName": {
            "type": "string"
          },
          "mountAction": {
            "type": "string"
          }
        }
      },
      "actionsRecoverToAlternate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageID": {
            "type": "string"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverToAlternate_788756"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverToAlternate"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "appData": {
            "$ref": "#/components/schemas/actionsRecoverToAlternateAppData"
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsRecoverToAlternateStorageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsRecoverToAlternateStorageData": {
        "type": "object",
        "properties": {
          "continuoussync": {
            "type": "string"
          },
          "dd": {
            "$ref": "#/components/schemas/actionsRecoverToAlternateDD"
          },
          "forceManualLock": {
            "type": "boolean"
          },
          "JobSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsRecoverToAlternateJobSpecs"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "retLockAutomatic": {
            "type": "boolean",
            "description": "This property has been deprecated and will be removed in a future release."
          },
          "retLockDuration": {
            "type": "string"
          },
          "retLockMax": {
            "type": "string"
          },
          "retLockMin": {
            "type": "string"
          },
          "retLockType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "synctill": {
            "type": "string"
          }
        }
      },
      "actionsRecoverToAlternateJobSpecs": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "firewallPath": {
            "type": "string"
          },
          "mgmtddReplCtxName": {
            "type": "string"
          },
          "mgmtddReplEthInterface": {
            "type": "string"
          },
          "sourceddReplCtxName": {
            "type": "string"
          },
          "sourceServerDRSystem": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "sourceStorageUID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "backupStatus": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "actionsRecoverToAlternateDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsRecoverToAlternateAppData": {
        "type": "object",
        "properties": {
          "copyData": {
            "type": "string"
          },
          "recoveryContextDestMtree": {
            "type": "string"
          },
          "recoveryEthPort": {
            "type": "string"
          },
          "recoveryMtree": {
            "type": "string"
          },
          "vaultID": {
            "type": "string"
          }
        }
      },
      "actionsClean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "cleaning-schedule"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "System"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The ID of the copy created (if applicable)"
            }
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "cleaning-schedule"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "cleaning-schedule"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsDrbackup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "drbackup-schedule"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "System"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The ID of the copy created (if applicable)"
            }
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "drbackup-schedule"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "drbackup-schedule"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "secureCopyAnalyzeJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "securecopyanalyze_5B0B7D"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "securecopy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/jobTask"
            }
          },
          "appData": {
            "$ref": "#/components/schemas/policiesPostAnalyzeAppData"
          },
          "storageData": {
            "$ref": "#/components/schemas/storageData"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/createSandboxJobAction"
          }
        }
      },
      "policiesLockJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "lock_867890"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "lock"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesHostInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the dd",
            "example": "dd1.dell.com"
          },
          "hostusername": {
            "type": "string",
            "example": "cradmin"
          },
          "hostsshkeyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "hostfingerprint": {
            "type": "string",
            "example": "D4:09:45:BE:1C:86:2D:C8:FE:75:74:B7:D4:E2:4A:3C:86:AC:C6:3E"
          },
          "sshport": {
            "type": "integer",
            "example": 22
          },
          "hosttype": {
            "type": "integer",
            "example": 100
          },
          "hostfp": {
            "type": "string"
          },
          "hoststoreid": {
            "type": "string"
          }
        }
      },
      "policiesCopyLockJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "copy-lock_908456"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy-lock"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "actionsLockStorageDD": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string"
          },
          "fileStats": {
            "$ref": "#/components/schemas/fileStats"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/jobHostInfossh"
          },
          "id": {
            "type": "string"
          },
          "isStatsAvailable": {
            "type": "boolean"
          },
          "isSupportedStatsVersion": {
            "type": "boolean"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/capacityDetails"
          },
          "maxSupportedFiles": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/mtreeStats"
          },
          "nickname": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/capacityDetails"
          },
          "version": {
            "type": "string"
          },
          "serialno": {
            "type": "string"
          },
          "createdby": {
            "type": "string",
            "description": "Who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationdate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifieddate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddstatus": {
            "type": "string",
            "example": "Ready"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "example": "EDT"
          },
          "name": {
            "type": "string",
            "example": "myStorage"
          }
        }
      },
      "policiesGetCopyStorage": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesGetCopyDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the copy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "copyname": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "policyid": {
            "type": "string",
            "description": "the ID of the policy that owns this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "jobid": {
            "type": "string",
            "description": "the job that created this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "example": "1514920116"
          },
          "expiresOn": {
            "type": "string",
            "description": "how long the copy is locked",
            "example": "1519102419"
          },
          "lastAnalysisStatus": {
            "type": "string",
            "description": "Status of last Analyze action",
            "example": "Good"
          },
          "lockStatus": {
            "type": "string",
            "description": "lock status may be locked,unlocked or Partial",
            "example": "locked"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "analysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesAnalysis"
            }
          },
          "uberCopy": {
            "type": "boolean"
          },
          "subCopyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/policiesGetCopyDetailStorage"
          },
          "prodAppName": {
            "type": "string"
          },
          "recoverabilityCheck": {
            "type": "string"
          },
          "priorRecoverabilityCheck": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          }
        }
      },
      "policiesGetCopyDetailStorage": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesGetCopyById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the copy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "copyname": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "policyid": {
            "type": "string",
            "description": "the ID of the policy that owns this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "jobid": {
            "type": "string",
            "description": "the job that created this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "example": "1514920116"
          },
          "expiresOn": {
            "type": "string",
            "description": "how long the copy is locked",
            "example": "1519102419"
          },
          "lastAnalysisStatus": {
            "type": "string",
            "description": "Status of last Analyze action",
            "example": "Good"
          },
          "lockStatus": {
            "type": "string",
            "description": "lock status may be locked,unlocked or Partial",
            "example": "locked"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "analysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesAnalysis"
            }
          },
          "uberCopy": {
            "type": "boolean"
          },
          "subCopyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/policiesGetCopyByIdStorage"
          },
          "prodAppName": {
            "type": "string"
          },
          "recoverabilityCheck": {
            "type": "string"
          },
          "priorRecoverabilityCheck": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          }
        }
      },
      "policiesGetCopyByIdStorage": {
        "required": [
          "mgmtddReplCtxName",
          "mgmtddReplEthInterface"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "mgmtddReplCtxName": {
            "type": "string",
            "description": "destination mTree path",
            "example": "mtree://myHost.domain.com/data/col1/nw-02-nw-02-repl"
          },
          "mgmtddReplEthInterface": {
            "type": "string",
            "description": "ethernet interface",
            "example": "ethV1"
          },
          "sourceStorageUID": {
            "type": "string",
            "example": "500"
          },
          "sourceStoragePathname": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "sourceStorageGID": {
            "type": "string"
          },
          "backupName": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "oldCopy": {
            "type": "boolean"
          },
          "components": {
            "type": "string"
          }
        }
      },
      "policiesGetCopy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the copy",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "copyname": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "policyid": {
            "type": "string",
            "description": "the ID of the policy that owns this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "nw2"
          },
          "jobid": {
            "type": "string",
            "description": "the job that created this copy",
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "example": "1514920116"
          },
          "expiresOn": {
            "type": "string",
            "description": "how long the copy is locked",
            "example": "1519102419"
          },
          "lastAnalysisStatus": {
            "type": "string",
            "description": "Status of last Analyze action",
            "example": "Good"
          },
          "lockStatus": {
            "type": "string",
            "description": "lock status may be locked,unlocked or Partial",
            "example": "locked"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "analysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesAnalysis"
            }
          },
          "uberCopy": {
            "type": "boolean"
          },
          "subCopyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/policiesGetCopyStorage"
          },
          "prodAppName": {
            "type": "string"
          },
          "recoverabilityCheck": {
            "type": "string"
          },
          "priorRecoverabilityCheck": {
            "type": "string"
          },
          "backupCreationTime": {
            "type": "string"
          },
          "backupVersion": {
            "type": "string"
          }
        }
      },
      "policiesAnalysis": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyCopyID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "example": "IndexEngines"
          },
          "jobid": {
            "type": "string"
          },
          "jobname": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "example": "1514920116"
          },
          "appVersion": {
            "type": "string",
            "example": "8.0.0-1.11"
          },
          "appjobid": {
            "type": "string",
            "example": "2165"
          },
          "status": {
            "type": "string",
            "example": "Good"
          },
          "appid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "appName": {
            "type": "string",
            "example": "myHost.domain.com"
          },
          "statusMessage": {
            "type": "string",
            "example": "No files to index"
          },
          "Summary": {
            "$ref": "#/components/schemas/policiesSummary"
          }
        }
      },
      "policiesSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "analysis_result_id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "job_number": {
            "type": "integer",
            "format": "int64"
          },
          "policy": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "Idle",
              "Pending",
              "Running",
              "Done",
              "Failed",
              "Partial",
              "Canceling",
              "Canceled",
              "Unknown"
            ]
          },
          "statemsg": {
            "type": "string"
          },
          "number_of_backup_sets": {
            "type": "integer",
            "description": "Number of new analyzed backupsets",
            "format": "int32"
          },
          "number_of_infections_found": {
            "type": "integer",
            "description": "Number of infections detected among analyzed backupsets",
            "format": "int32"
          },
          "total_bytes_indexed": {
            "type": "integer",
            "description": "Total number of bytes indexed",
            "format": "int64"
          },
          "unsupported_bytes": {
            "type": "integer",
            "description": "Total number of unknown or unsupported bytes encountered",
            "format": "int64"
          },
          "missing_bytes": {
            "type": "integer",
            "description": "Total number of missing data bytes",
            "format": "int64"
          },
          "average_file_change_rate": {
            "type": "string",
            "description": "Average file change rate"
          },
          "number_of_unique_clients": {
            "type": "integer",
            "description": "Number of unique clients",
            "format": "int64"
          },
          "backup_time_window": {
            "$ref": "#/components/schemas/policiesBackupTimeWindow"
          },
          "elapsed_time": {
            "type": "integer",
            "description": "Elapsed time of job",
            "format": "int64"
          }
        }
      },
      "policiesBackupTimeWindow": {
        "type": "object",
        "description": "Timeframe of analyzed backups",
        "properties": {
          "id": {
            "type": "string"
          },
          "storageID": {
            "type": "string"
          },
          "cs_job_summary_id": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "description": "Beginning of backup window",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "description": "End of backup window",
            "format": "int64"
          }
        }
      },
      "policiesSandboxDetails": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "parentSandbox": {
            "$ref": "#/components/schemas/policiesGetSandbox"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetSandbox"
            }
          }
        }
      },
      "policiesGetAnalysisReport": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "policiesGetSandboxById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "example": "FordGT"
          },
          "type": {
            "type": "string",
            "description": "type of sandbox created"
          },
          "copyid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyName": {
            "type": "string",
            "example": "myCopyName"
          },
          "policyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "example": "myPolicyName"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "jobid": {
            "type": "string",
            "description": "the job that created this samdbox",
            "example": "5ccccccccccccccccccccccc"
          },
          "appid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "appNickname": {
            "type": "string",
            "example": "myAppNickname"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "exportedHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mountPoint": {
            "type": "string",
            "description": "where the sandbox is mounted",
            "example": "/cr/mnt/cr-FordGT"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of who created the sandbox"
          },
          "creationDate": {
            "type": "object",
            "example": "1515527649"
          },
          "combined": {
            "type": "boolean",
            "example": false
          },
          "uberSandbox": {
            "type": "boolean",
            "example": true
          },
          "subSandboxIDs": {
            "type": "array",
            "example": [
              "1515527649",
              "1515527649"
            ],
            "items": {
              "type": "string"
            }
          },
          "sandboxType": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "policiesGetSandbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "example": "FordGT"
          },
          "type": {
            "type": "string",
            "description": "type of sandbox created"
          },
          "copyid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyName": {
            "type": "string",
            "example": "myCopyName"
          },
          "policyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "example": "myPolicyName"
          },
          "mgmtddid": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "jobid": {
            "type": "string",
            "description": "the job that created this samdbox",
            "example": "5ccccccccccccccccccccccc"
          },
          "appid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "appNickname": {
            "type": "string",
            "example": "myAppNickname"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "exportedHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mountPoint": {
            "type": "string",
            "description": "where the sandbox is mounted",
            "example": "/cr/mnt/cr-FordGT"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of who created the sandbox"
          },
          "creationDate": {
            "type": "object",
            "example": "1515527649"
          },
          "combined": {
            "type": "boolean",
            "example": false
          },
          "uberSandbox": {
            "type": "boolean",
            "example": true
          },
          "subSandboxIDs": {
            "type": "array",
            "example": [
              "1515527649",
              "1515527649"
            ],
            "items": {
              "type": "string"
            }
          },
          "sandboxType": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "deleteStatus": {
            "type": "string",
            "description": "Status of the delete operation",
            "example": "completed"
          }
        }
      },
      "lockInput": {
        "required": [
          "ethInterface",
          "ddMgmtID",
          "policyID",
          "policyName"
        ],
        "type": "object",
        "properties": {
          "ddMgmtID": {
            "type": "string",
            "description": "ID of the mgmtdd",
            "example": "5ccccccccccccccccccccccc"
          },
          "ethInterface": {
            "type": "string",
            "description": "dd replication ethernet interface",
            "example": "ethV1"
          },
          "policyID": {
            "type": "string",
            "description": "id of the policy",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "name of the policy",
            "example": "policy_name"
          },
          "fireWallPath": {
            "type": "string",
            "description": "pathname of the firewall script",
            "example": "/opt/firewall-script"
          }
        }
      },
      "lockEntry": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "description": "Id of created lock entry",
            "example": "5ccccccccccccccccccccccc"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsGetEventById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsGetEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsGetAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsGetAlertById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsUpdateAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsUpdateAlertRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsSendEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "notifyID": {
            "type": "string",
            "description": "alert/event id",
            "readOnly": true,
            "example": "1000"
          },
          "createdBy": {
            "type": "string",
            "description": "userID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "usvc Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "string"
            ],
            "items": {
              "type": "string"
            }
          },
          "userid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "sandboxdata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "example": "sandbox-name"
          },
          "deletestatus": {
            "type": "string"
          },
          "storageuser": {
            "type": "string",
            "description": "The ddboost storage user",
            "example": "ddboost-user"
          },
          "type": {
            "type": "string",
            "description": "Type of sandbox created"
          },
          "copyid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyName": {
            "type": "string",
            "example": "myCopyName"
          },
          "policyid": {
            "type": "string",
            "example": "5cccccccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "example": "myPolicyName"
          },
          "ddMgmtID": {
            "type": "string",
            "description": "ID of the mgmt dd host entry",
            "example": "6eeeeeeeeeeeeeeeeeeeee"
          },
          "jobid": {
            "type": "string",
            "description": "The job that created this sandbox",
            "example": "5ccccccccccccccccccccccc"
          },
          "appid": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "appNickname": {
            "type": "string",
            "example": "myAppNickname"
          },
          "mountsource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "exportedhostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mountpoint": {
            "type": "string",
            "description": "Where the sandbox is mounted",
            "example": "/cr/mnt/cr-FordGT"
          },
          "mounthost": {
            "type": "string"
          },
          "createdby": {
            "type": "string",
            "description": "ID of who created the sandbox"
          },
          "creationdate": {
            "type": "object",
            "example": "1515527649"
          },
          "combined": {
            "type": "boolean",
            "example": false
          },
          "ubersandbox": {
            "type": "boolean",
            "example": true
          },
          "subsandboxids": {
            "type": "array",
            "example": [
              "1515527649",
              "1515527649"
            ],
            "items": {
              "type": "string"
            }
          },
          "sandboxtype": {
            "type": "string"
          },
          "bypasssyntheticoptim": {
            "type": "boolean"
          },
          "readonly": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "notificationsGetEmailSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "EmailSettings"
          },
          "mailServerUrl": {
            "type": "string",
            "description": "mail server url",
            "readOnly": true,
            "example": "mailserver.mail.com"
          },
          "mailServerFrom": {
            "type": "string",
            "description": "register mail server user",
            "readOnly": true,
            "example": "mailuser@mailserver.mail.com"
          },
          "mailServerUsername": {
            "type": "string",
            "description": "mail server username",
            "readOnly": true,
            "example": "mailUser"
          },
          "mailServerPassword": {
            "type": "string",
            "description": "mail server password",
            "readOnly": true,
            "example": "************"
          },
          "mailServerPort": {
            "type": "integer",
            "description": "mail server port",
            "readOnly": true,
            "example": 25
          },
          "allowableDomains": {
            "type": "array",
            "description": "allowed email domains",
            "readOnly": true,
            "example": [
              "dell.com",
              "xyz.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "boolean",
            "description": "status",
            "readOnly": true,
            "example": true
          },
          "enableDomainChecking": {
            "type": "boolean",
            "description": "enable domain checking",
            "readOnly": true,
            "example": true
          },
          "enableTLS": {
            "type": "boolean",
            "description": "enable TLS",
            "example": true,
            "readOnly": true
          },
          "mailServerCert": {
            "type": "string",
            "description": "mail server certificate",
            "readOnly": true,
            "example": "-----BEGIN CERTIFICATE-----\nMIIDVzCCAj+gAwIBAgIJAPMGraYA8toTMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV\nBAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg\nQ29tcGFueSBMdGQwHhcNMjIwMTI4MTYyMTM5WhcNMjMwMTI4MTYyMTM5WjBCMQsw\nCQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh\ndWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nySrJrUcWM7NWI7JURUHPoDFcpJ8yidv0xrLWa1nYm7tFa0cMxqbdIJdQKjuh1ZDO\nx6g0Y3bGxRYdETCfB1HKeonuUGXvm0l4hZxwleOSjcpoe8cKSRKAV7KvwcUzN8dZ\nPB/u0uWxtDw/SnjP28+5G/JXaZCJSiyER9ZWL/67ow0R41Ods0TDfOH6mneh/mfM\nWoGCpTvcG9IM2gLOzSvv/nz5MOA7P4VrMFmgdQu5qQCdrHWmhQM1Yhb4pxkMz0tq\netwwTOfdk0m9go7lM0LxNjray08rBb22fOLDg6sTHYDtDZRAFsKZIXf7nGPDMlHI\n49Ar8jtoiz88JHjeWyou2wIDAQABo1AwTjAdBgNVHQ4EFgQUzoBi06r0Q39cVdZt\n1+S7vwccdFIwHwYDVR0jBBgwFoAUzoBi06r0Q39cVdZt1+S7vwccdFIwDAYDVR0T\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAE1U/Zl2HuhxIgQ9BBGZbRmbkB/hs\nP+3OGnO3/CSdKhKxlHirMy1YnGE3nQ4OcePg/g6CzUziWPtXplwzmhLgz6tvUreY\nSq4cYGe+uXDJ3Hu6k8hxUmd0bO69yhZUpzi3yCcW2LWBo02NvEHHUb0rIyQzAElx\nhGJDb5TxhnjEQ6Pu6r2CSzJGDfe0rlUtufgRcTHAnOr+npNqV9TyGLNitSlD7AfD\nq5ArUDgmR37vKE2G0iWRUJFB9G3SHAR3Ow23ejpuSJ4zfEg7jCUkJzK6/HSwPIY2\ncRwmGqxSp65lwS9srDxipfZNEhmGLzn+7qYQOR4+XWZfXNC/V6LZuYdgYw==\n-----END CERTIFICATE-----\n"
          }
        }
      },
      "notificationsUpdateEmailSettingsRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "example": "EmailSettings"
          },
          "mailServerUrl": {
            "type": "string",
            "description": "mail server url",
            "example": "mailserver.mail.com"
          },
          "mailServerFrom": {
            "type": "string",
            "description": "register mail server user",
            "example": "mailuser@mailserver.mail.com"
          },
          "mailServerUsername": {
            "type": "string",
            "description": "mail server username",
            "example": "mailUser"
          },
          "mailServerPassword": {
            "type": "string",
            "description": "mail server password",
            "example": "************"
          },
          "hostStoreID": {
            "type": "string",
            "description": "host store id",
            "example": "A880E3AA7A"
          },
          "mailServerPort": {
            "type": "integer",
            "description": "mail server port",
            "example": 25
          },
          "status": {
            "type": "boolean",
            "description": "mail support status",
            "example": true
          },
          "allowableDomains": {
            "type": "array",
            "description": "allowed email domains",
            "example": [
              "dell.com",
              "xyz.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "enableDomainChecking": {
            "type": "boolean",
            "description": "enable domain checking",
            "example": true
          },
          "enableTLS": {
            "type": "boolean",
            "description": "enable TLS",
            "example": true
          },
          "mailServerCert": {
            "type": "string",
            "description": "mail server certificate",
            "readOnly": true,
            "example": "-----BEGIN CERTIFICATE-----\nMIIDVzCCAj+gAwIBAgIJAPMGraYA8toTMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV\nBAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg\nQ29tcGFueSBMdGQwHhcNMjIwMTI4MTYyMTM5WhcNMjMwMTI4MTYyMTM5WjBCMQsw\nCQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh\ndWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nySrJrUcWM7NWI7JURUHPoDFcpJ8yidv0xrLWa1nYm7tFa0cMxqbdIJdQKjuh1ZDO\nx6g0Y3bGxRYdETCfB1HKeonuUGXvm0l4hZxwleOSjcpoe8cKSRKAV7KvwcUzN8dZ\nPB/u0uWxtDw/SnjP28+5G/JXaZCJSiyER9ZWL/67ow0R41Ods0TDfOH6mneh/mfM\nWoGCpTvcG9IM2gLOzSvv/nz5MOA7P4VrMFmgdQu5qQCdrHWmhQM1Yhb4pxkMz0tq\netwwTOfdk0m9go7lM0LxNjray08rBb22fOLDg6sTHYDtDZRAFsKZIXf7nGPDMlHI\n49Ar8jtoiz88JHjeWyou2wIDAQABo1AwTjAdBgNVHQ4EFgQUzoBi06r0Q39cVdZt\n1+S7vwccdFIwHwYDVR0jBBgwFoAUzoBi06r0Q39cVdZt1+S7vwccdFIwDAYDVR0T\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAE1U/Zl2HuhxIgQ9BBGZbRmbkB/hs\nP+3OGnO3/CSdKhKxlHirMy1YnGE3nQ4OcePg/g6CzUziWPtXplwzmhLgz6tvUreY\nSq4cYGe+uXDJ3Hu6k8hxUmd0bO69yhZUpzi3yCcW2LWBo02NvEHHUb0rIyQzAElx\nhGJDb5TxhnjEQ6Pu6r2CSzJGDfe0rlUtufgRcTHAnOr+npNqV9TyGLNitSlD7AfD\nq5ArUDgmR37vKE2G0iWRUJFB9G3SHAR3Ow23ejpuSJ4zfEg7jCUkJzK6/HSwPIY2\ncRwmGqxSp65lwS9srDxipfZNEhmGLzn+7qYQOR4+XWZfXNC/V6LZuYdgYw==\n-----END CERTIFICATE-----\n"
          }
        }
      },
      "notificationsUpdateEmailSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "example": "EmailSettings"
          },
          "mailServerUrl": {
            "type": "string",
            "description": "mail server url",
            "example": "mailserver.mail.com"
          },
          "mailServerFrom": {
            "type": "string",
            "description": "register mail server user",
            "example": "mailuser@mailserver.mail.com"
          },
          "mailServerUsername": {
            "type": "string",
            "description": "mail server username",
            "example": "mailUser"
          },
          "mailServerPassword": {
            "type": "string",
            "description": "mail server password",
            "example": "************"
          },
          "hostStoreID": {
            "type": "string",
            "description": "host store id",
            "example": "A880E3AA7A"
          },
          "mailServerPort": {
            "type": "integer",
            "description": "mail server port",
            "example": 25
          },
          "status": {
            "type": "boolean",
            "description": "mail support status",
            "example": true
          },
          "allowableDomains": {
            "type": "array",
            "description": "allowed email domains",
            "example": [
              "dell.com",
              "xyz.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "enableDomainChecking": {
            "type": "boolean",
            "description": "enable domain checking",
            "example": true
          },
          "enableTLS": {
            "type": "boolean",
            "description": "enable TLS",
            "example": true
          },
          "mailServerCert": {
            "type": "string",
            "description": "mail server certificate",
            "readOnly": true,
            "example": "-----BEGIN CERTIFICATE-----\nMIIDVzCCAj+gAwIBAgIJAPMGraYA8toTMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV\nBAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg\nQ29tcGFueSBMdGQwHhcNMjIwMTI4MTYyMTM5WhcNMjMwMTI4MTYyMTM5WjBCMQsw\nCQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh\ndWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nySrJrUcWM7NWI7JURUHPoDFcpJ8yidv0xrLWa1nYm7tFa0cMxqbdIJdQKjuh1ZDO\nx6g0Y3bGxRYdETCfB1HKeonuUGXvm0l4hZxwleOSjcpoe8cKSRKAV7KvwcUzN8dZ\nPB/u0uWxtDw/SnjP28+5G/JXaZCJSiyER9ZWL/67ow0R41Ods0TDfOH6mneh/mfM\nWoGCpTvcG9IM2gLOzSvv/nz5MOA7P4VrMFmgdQu5qQCdrHWmhQM1Yhb4pxkMz0tq\netwwTOfdk0m9go7lM0LxNjray08rBb22fOLDg6sTHYDtDZRAFsKZIXf7nGPDMlHI\n49Ar8jtoiz88JHjeWyou2wIDAQABo1AwTjAdBgNVHQ4EFgQUzoBi06r0Q39cVdZt\n1+S7vwccdFIwHwYDVR0jBBgwFoAUzoBi06r0Q39cVdZt1+S7vwccdFIwDAYDVR0T\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAE1U/Zl2HuhxIgQ9BBGZbRmbkB/hs\nP+3OGnO3/CSdKhKxlHirMy1YnGE3nQ4OcePg/g6CzUziWPtXplwzmhLgz6tvUreY\nSq4cYGe+uXDJ3Hu6k8hxUmd0bO69yhZUpzi3yCcW2LWBo02NvEHHUb0rIyQzAElx\nhGJDb5TxhnjEQ6Pu6r2CSzJGDfe0rlUtufgRcTHAnOr+npNqV9TyGLNitSlD7AfD\nq5ArUDgmR37vKE2G0iWRUJFB9G3SHAR3Ow23ejpuSJ4zfEg7jCUkJzK6/HSwPIY2\ncRwmGqxSp65lwS9srDxipfZNEhmGLzn+7qYQOR4+XWZfXNC/V6LZuYdgYw==\n-----END CERTIFICATE-----\n"
          }
        }
      },
      "notificationsSendEmailRequestBody": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          }
        }
      },
      "notificationsMailServerRequestBody": {
        "type": "object",
        "properties": {
          "mailServerUrl": {
            "type": "string",
            "description": "mail server url",
            "example": "mailserver.mail.com"
          },
          "mailServerPort": {
            "type": "integer",
            "description": "mail server port",
            "example": 25
          }
        }
      },
      "notificationsMailServerCert": {
        "type": "object",
        "properties": {
          "certPem": {
            "type": "string",
            "description": "certificate chain of mail server"
          },
          "certError": {
            "type": "string",
            "description": "certificate error of mail server"
          }
        }
      },
      "schedulesCleanup": {
        "type": "object",
        "properties": {
          "deletionResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesDeletionResult"
            }
          }
        }
      },
      "schedulesDeletionResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success or error message",
            "readOnly": true,
            "example": "Successfully deleted schedules"
          },
          "scheduleIDs": {
            "type": "string",
            "description": "List of schedule IDs",
            "example": ""
          },
          "scheduleNames": {
            "type": "string",
            "description": "List of copies to delete",
            "example": ""
          },
          "status": {
            "type": "integer",
            "description": "Response status for success or error result",
            "readOnly": true,
            "example": 200
          }
        }
      },
      "schedulesGetSchedules": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesGetSchedule"
            }
          }
        }
      },
      "schedulesGetSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting",
              "recoverycheck"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageUser": {
            "type": "string"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "ethV3"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesGetScheduleActionData"
          }
        }
      },
      "schedulesCreateScheduleRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting",
              "recoverycheck"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "ethV3"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting",
              "recoverycheck"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "ethV3"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateCsSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesCreateCsScheduleActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateSyncJobs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesCreateSyncJobsActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the app id to perform recovery actions from the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "copy id used for recovery or lock actions from schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "network interface to connect CyberSense to storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateAnalyzeJobs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesCreateAnalyzeJobsActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the app id to perform recovery actions from the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "copy id used for recovery or lock actions from schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "network interface to connect CyberSense to storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateCsScheduleActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesCreateCsScheduleConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesCreateSyncJobsActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesCreateSyncJobsConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesCreateAnalyzeJobsActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesCreateAnalyzeJobsConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesCreateCsScheduleConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/schedulesCreateCsScheduleFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesCreateSyncJobsConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesCreateAnalyzeJobsConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesCreateCsScheduleFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesCreateCsScheduleAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "schedulesCreateCsScheduleAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "schedulesGetScheduleById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "status": {
            "type": "boolean",
            "description": "mail support status",
            "example": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting",
              "recoverycheck"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "ethV3"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesUpdateScheduleRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting",
              "recoverycheck"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "ethV3"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesGetCsReportSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesGetCsScheduleActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "the id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesGetSyncJobsReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesGetSyncJobsActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the app id to perform recovery actions from the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "copy id used for recovery or lock actions from schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "network interface to connect CyberSense to storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesGetAnalyzeJobsReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "the id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "the name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesGetAnalyzeJobsActiondata"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "the app id to perform recovery actions from the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "copy id used for recovery or lock actions from schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "network interface to connect CyberSense to storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesGetCsScheduleActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesGetCsScheduleConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesGetSyncJobsActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesGetSyncJobsConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesGetAnalyzeJobsActiondata": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesGetAnalyzeJobsConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          }
        }
      },
      "schedulesGetCsScheduleConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/schedulesGetCsScheduleFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesGetSyncJobsConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "string"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesGetAnalyzeJobsConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "string"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesGetCsScheduleFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesGetCsScheduleAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "schedulesGetCsScheduleAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "schedulesCreateJobsSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "The id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "The name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesCreateJobsScheduleActionData"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "The id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "The id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "Optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "The role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "When the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "When the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "Mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "Mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesCreateJobsScheduleActionData": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesCreateJobsScheduleConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          }
        }
      },
      "schedulesCreateJobsScheduleConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/schedulesCreateJobsScheduleFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesCreateJobsScheduleFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "type": "object"
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "schedulesGetJobsReportSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule",
            "example": "mySchedule"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the schedule is enabled or not",
            "example": true
          },
          "policyID": {
            "type": "string",
            "description": "The id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "The name of the policy the schedule should run against",
            "example": "policy_name",
            "readOnly": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/schedulesGetJobsScheduleActionData"
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "request": {
            "type": "string",
            "description": "The request to run",
            "enum": [
              "sync",
              "copy",
              "securecopyanalyze",
              "sync-copy",
              "copy-lock",
              "securecopy",
              "analyze",
              "reporting"
            ]
          },
          "appID": {
            "type": "string",
            "description": "The id of the app the schedule should use to perform recovery actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "string",
            "description": "The id of the copy the schedule should use for recovery or lock actions",
            "example": "5ccccccccccccccccccccccc"
          },
          "retLockDuration": {
            "type": "string",
            "description": "Optionally override the policy's retention lock settings",
            "example": "12h"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "The role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "lastRun": {
            "type": "string",
            "description": "When the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "When the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "number",
            "readOnly": true
          },
          "nextRunBase": {
            "type": "string",
            "description": "Base next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "creationDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "readOnly": true,
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "includefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "readOnly": true,
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "readOnly": true,
            "description": "Mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "readOnly": true,
            "description": "Mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "schedulesGetJobsScheduleActionData": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesGetJobsScheduleConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          }
        }
      },
      "schedulesGetJobsScheduleConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/schedulesGetJobsScheduleFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesDelivery": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "example": "email"
          },
          "settings": {
            "$ref": "#/components/schemas/schedulesDeliverySettings"
          }
        }
      },
      "schedulesDeliverySettings": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "TestEmailSubject"
          },
          "message": {
            "type": "string",
            "example": "TestEmailMessage"
          },
          "emailOption": {
            "type": "string",
            "example": "attachment"
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          }
        }
      },
      "schedulesReportDuration": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "Report range for last few hours",
            "example": 0
          },
          "days": {
            "type": "integer",
            "description": "Report range for last few days",
            "example": 1
          }
        }
      },
      "schedulesGetJobsScheduleFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "type": "object"
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "schedulesGetScheduleActionData": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/schedulesGetScheduleConfig"
          },
          "description": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean"
          }
        }
      },
      "schedulesGetScheduleConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/schedulesGetScheduleFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/schedulesReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/schedulesDelivery"
          }
        }
      },
      "schedulesGetScheduleFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "type": "object"
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assetSelection": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesGetScheduleAssets"
            }
          }
        }
      },
      "schedulesGetScheduleAssets": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schedulesGetSchedulesPolicyMtrees"
            }
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          }
        }
      },
      "schedulesGetSchedulesPolicyMtrees": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyStatus": {
            "type": "string"
          },
          "replMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          }
        }
      },
      "schedulesGetRandomizer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the setting",
            "example": "randomizer"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the randomizer is enabled or not",
            "example": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "randomBaseTime": {
            "type": "string",
            "description": "The basetime required to calculate random next run time",
            "example": "2023-07-12T15:54:00.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "description": "The random window duration required to calculate random next run time",
            "example": 60
          },
          "randomNextRunTime": {
            "type": "string",
            "description": "When the schedules will next run based on randomizer",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          }
        }
      },
      "schedulesFrequency": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "Frequency in hours",
            "example": 12
          },
          "days": {
            "type": "integer",
            "description": "Frequency in days",
            "example": 0
          }
        }
      },
      "schedulesUpdateRandomizer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id",
            "readOnly": true,
            "example": "3DDDDDDDDDDDDDDDDDDDDDDD"
          },
          "name": {
            "type": "string",
            "description": "The name of the setting",
            "example": "randomizer"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the randomizer is enabled or not",
            "example": true
          },
          "frequency": {
            "$ref": "#/components/schemas/schedulesFrequency"
          },
          "randomBaseTime": {
            "type": "string",
            "description": "The basetime required to calculate random next run time",
            "example": "2023-07-12T15:54:00.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "description": "The random window duration required to calculate random next run time",
            "example": 60
          },
          "randomNextRunTime": {
            "type": "string",
            "description": "When the schedules will next run based on randomizer",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          }
        }
      },
      "schedulesCleanupRequestBody": {
        "type": "object",
        "properties": {
          "scheduleIDs": {
            "type": "string",
            "example": ""
          }
        }
      },
      "ondemandcleaning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "cleaning-schedule_098765"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": null
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemUpdateTelemetrySchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the telemetry Schedule",
            "example": "5bbbbbbbbbbbbbbbbbbbbbbb"
          },
          "name": {
            "type": "string",
            "description": "Name of the telemetry Schedule",
            "example": "telemetry-schedule"
          },
          "policyName": {
            "type": "string",
            "example": ""
          },
          "policyID": {
            "type": "string",
            "description": "ID of the policy",
            "example": ""
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "Is the telemetry schedule enabled",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "ID that created the schedule",
            "example": "5bbbbbbbbbbbbbbbbbbbbbbb"
          },
          "createdByRole": {
            "type": "string",
            "description": "Role that created the schedule",
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the schedule was created",
            "example": "1591185949"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the schedule was modified",
            "example": "1591185949"
          },
          "lastRun": {
            "type": "string",
            "description": "Last run date/time of the schedule",
            "example": "2020-06-03T21:00:00.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "Next run date/time of the schedule",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "request": {
            "type": "string",
            "description": "Request command for the schedule",
            "example": "drbackup-schedule"
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-07T08:00:00Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemUpdateTelemetryScheduleRequestBody": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "string",
            "description": "Enable the telemetry schedule",
            "example": "true"
          },
          "nextRun": {
            "type": "string",
            "description": "Date/Time of next schedule",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          }
        }
      },
      "systemUpdateCleaningSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "The name of the cleaning schedule",
            "readOnly": true,
            "example": "cleaning-schedule"
          },
          "policyID": {
            "type": "string",
            "description": "The id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "The state of the cleaning schedule",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "The role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "lastRun": {
            "type": "string",
            "description": "When the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "When the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-07T08:00:00Z"
          },
          "request": {
            "type": "string",
            "example": "cleaning-schedule"
          },
          "copiesDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 7
          },
          "jobsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          },
          "alertsDaysExpire": {
            "minimum": 30,
            "type": "integer",
            "example": 90
          },
          "eventsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          },
          "drBackupDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 7
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemGetCleaningSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "The name of the cleaning schedule",
            "readOnly": true,
            "example": "cleaning-schedule"
          },
          "policyID": {
            "type": "string",
            "description": "The id of the policy the schedule should run against",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "The state of the cleaning schedule",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "The role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "lastRun": {
            "type": "string",
            "description": "When the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "When the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-07T08:00:00Z"
          },
          "request": {
            "type": "string",
            "example": "cleaning-schedule"
          },
          "copiesDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 7
          },
          "jobsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          },
          "alertsDaysExpire": {
            "minimum": 30,
            "type": "integer",
            "example": 90
          },
          "eventsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          },
          "drBackupDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 7
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "actionsCleanRequestBody": {
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/actionsFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "The state of the cleaning schedule",
            "example": "true"
          },
          "nextRun": {
            "type": "string",
            "description": "When the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "copiesDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 7
          },
          "jobsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          },
          "alertsDaysExpire": {
            "minimum": 30,
            "type": "integer",
            "example": 90
          },
          "eventsDaysExpire": {
            "minimum": 7,
            "type": "integer",
            "example": 90
          }
        }
      },
      "actionsFrequency": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "example": 0
          },
          "days": {
            "type": "integer",
            "example": 7
          }
        }
      },
      "frequency": {
        "type": "object",
        "properties": {
          "hours": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "example": 3
          },
          "days": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "example": 2
          }
        }
      },
      "activityreport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "The name of the activity report schedule",
            "readOnly": true,
            "example": "activity-schedule"
          },
          "policyID": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "frequency": {
            "type": "object",
            "properties": {
              "hours": {
                "type": "integer",
                "example": 0
              },
              "days": {
                "type": "integer",
                "example": 1
              }
            }
          },
          "enabled": {
            "type": "string",
            "description": "The state of the cleaning schedule",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "the id of the user who created this schedule",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "the role of the user who created this schedule",
            "readOnly": true,
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the cleaning schedule was created",
            "example": "1553873984"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the cleaning schedule was modified",
            "example": "1553873134"
          },
          "lastRun": {
            "type": "string",
            "description": "when the action was last run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-19T16:13:09.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "when the action will next run with this schedule",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-20T16:13:09.000Z"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "policiesPostAnalyzeRequestBody": {
        "required": [
          "appid"
        ],
        "type": "object",
        "properties": {
          "appid": {
            "type": "string",
            "example": "23ab5454bcf23"
          },
          "includefiles": {
            "type": "array",
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "storageDataInterface": {
            "type": "string",
            "description": "mention the network interface through with CybereSense need to contact storage",
            "example": "ethV3"
          }
        }
      },
      "policiesPostAnalysisReportRequestBody": {
        "type": "object",
        "properties": {
          "List_of_email_addresses": {
            "type": "array",
            "example": [
              "cr@cyberrecovery.com",
              "cradmin@cr.com"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vaultUnlocked": {
        "type": "object",
        "properties": {
          "vaultStatus": {
            "type": "string",
            "example": "Unlocked"
          },
          "vaultUnlockTime": {
            "type": "number",
            "example": 5
          },
          "locks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vaultGetStateLocks"
            }
          }
        }
      },
      "vaultLocked": {
        "type": "object",
        "properties": {
          "vaultStatus": {
            "type": "string",
            "example": "Locked"
          }
        }
      },
      "vaultUnknown": {
        "type": "object",
        "properties": {
          "vaultStatus": {
            "type": "string",
            "example": "Unknown"
          }
        }
      },
      "vaultSecured": {
        "type": "object",
        "properties": {
          "vaultStatus": {
            "type": "string",
            "example": "Secured"
          },
          "vaultSecuredTime": {
            "type": "number",
            "example": "3"
          }
        }
      },
      "vaultGetStateLocks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mgmtddID": {
            "type": "string"
          },
          "prodDdIP": {
            "type": "string"
          },
          "ethInterface": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          }
        }
      },
      "settings": {
        "required": [
          "loglevel"
        ],
        "type": "object",
        "properties": {
          "loglevel": {
            "type": "string",
            "example": "INFO"
          }
        }
      },
      "systemGetTelemetrySchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the telemetry Schedule",
            "example": "5bbbbbbbbbbbbbbbbbbbbbbb"
          },
          "name": {
            "type": "string",
            "description": "Name of the telemetry Schedule",
            "example": "telemetry-schedule"
          },
          "policyName": {
            "type": "string",
            "example": ""
          },
          "policyID": {
            "type": "string",
            "description": "ID of the policy",
            "example": ""
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "Is the telemetry schedule enabled",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "ID that created the schedule",
            "example": "5bbbbbbbbbbbbbbbbbbbbbbb"
          },
          "createdByRole": {
            "type": "string",
            "description": "Role that created the schedule",
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the schedule was created",
            "example": "1591185949"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the schedule was modified",
            "example": "1591185949"
          },
          "lastRun": {
            "type": "string",
            "description": "Last run date/time of the schedule",
            "example": "2020-06-03T21:00:00.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "Next run date/time of the schedule",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "request": {
            "type": "string",
            "description": "Request command for the schedule",
            "example": "drbackup-schedule"
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-07T08:00:00Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemGetDrbackupConfig": {
        "type": "object",
        "properties": {
          "mgmtddId": {
            "type": "string"
          },
          "mtreeName": {
            "type": "string"
          }
        }
      },
      "systemUpdateDrbackupConfig": {
        "type": "object",
        "properties": {
          "mgmtddId": {
            "type": "string"
          },
          "mtreeName": {
            "type": "string"
          }
        }
      },
      "systemUpdateDrbackupConfigRequestBody": {
        "type": "object",
        "properties": {
          "mgmtddId": {
            "type": "string"
          },
          "mtreeName": {
            "type": "string"
          }
        }
      },
      "systemGetDrbackupSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the DRBackup Schedule",
            "example": "5cccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "Name of the DRBackup Schedule",
            "example": "drbackup-schedule"
          },
          "policyName": {
            "type": "string",
            "example": ""
          },
          "policyID": {
            "type": "string",
            "description": "ID of the policy",
            "example": ""
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "Is the DRBackup schedule enabled",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "ID that created the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "Role that created the schedule",
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the schedule was created",
            "example": "1591185949"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the schedule was modified",
            "example": "1591185949"
          },
          "lastRun": {
            "type": "string",
            "description": "Last run date/time of the schedule",
            "example": "2020-06-03T21:00:00.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "Next run date/time of the schedule",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-07T08:00:00Z"
          },
          "request": {
            "type": "string",
            "description": "Request command for the schedule",
            "example": "drbackup-schedule"
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          }
        }
      },
      "systemFrequency": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "Frequency in hours",
            "example": 0
          },
          "days": {
            "type": "integer",
            "description": "Frequency in days",
            "example": 1
          }
        }
      },
      "systemUpdateDrbackupScheduleRequestBody": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "string",
            "description": "Enable the DR Backup schedule",
            "example": "true"
          },
          "nextRun": {
            "type": "string",
            "description": "Date/Time of next DR Backup run",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          }
        }
      },
      "systemUpdateDrbackupSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the DRBackup Schedule",
            "example": "4ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "Name of the DRBackup Schedule",
            "example": "drbackup-schedule"
          },
          "policyName": {
            "type": "string",
            "example": ""
          },
          "policyID": {
            "type": "string",
            "description": "ID of the policy",
            "example": ""
          },
          "frequency": {
            "$ref": "#/components/schemas/systemFrequency"
          },
          "enabled": {
            "type": "string",
            "description": "Is the DRBackup schedule enabled",
            "example": "true"
          },
          "createdBy": {
            "type": "string",
            "description": "ID that created the schedule",
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByRole": {
            "type": "string",
            "description": "Role that created the schedule",
            "example": "admin"
          },
          "creationDate": {
            "type": "string",
            "description": "Date the schedule was created",
            "example": "1591185949"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the schedule was modified",
            "example": "1591185949"
          },
          "lastRun": {
            "type": "string",
            "description": "Last run date/time of the schedule",
            "example": "2020-06-03T21:00:00.000Z"
          },
          "nextRun": {
            "type": "string",
            "description": "Next run date/time of the schedule",
            "example": "2020-06-14T00:00:00.000Z"
          },
          "randomWindowDuration": {
            "type": "integer",
            "example": 0
          },
          "nextRunBase": {
            "type": "string",
            "example": "2023-09-14T08:00:00Z"
          },
          "request": {
            "type": "string",
            "description": "Request command for the schedule",
            "example": "drbackup-schedule"
          },
          "mtreeContentFormat": {
            "type": "string",
            "example": null
          },
          "storageDataInterface": {
            "type": "string",
            "example": null
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          },
          "includefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "dashboard": {
        "type": "object",
        "properties": {
          "securityAlerts": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/systemSecurityAlerts"
            }
          },
          "systemAlerts": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/systemSystemAlerts"
            }
          },
          "vaultStatus": {
            "type": "string",
            "description": "locked, unlocked, secured",
            "readOnly": true,
            "example": "locked"
          },
          "vaultRunningJobs": {
            "type": "array",
            "description": "Current running job(s)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/systemVaultJobs"
            }
          },
          "elapsedTime": {
            "type": "integer",
            "description": "Time since sync started in seconds",
            "readOnly": true,
            "example": 1238
          },
          "warningJobs": {
            "type": "integer",
            "description": "Number of warning jobs",
            "readOnly": true,
            "example": 14
          },
          "runningJobs": {
            "type": "integer",
            "description": "Number of running jobs",
            "readOnly": true,
            "example": 3
          },
          "completedJobs": {
            "type": "integer",
            "description": "Number of completed jobs",
            "readOnly": true,
            "example": 92
          },
          "canceledJobs": {
            "type": "integer",
            "description": "Number of canceled jobs",
            "readOnly": true,
            "example": 12
          },
          "criticalJobs": {
            "type": "integer",
            "description": "Number of critical jobs",
            "readOnly": true,
            "example": 4
          },
          "securityAlertsCritical": {
            "type": "integer",
            "description": "Number of critical security alerts",
            "readOnly": true,
            "example": 8
          },
          "securityAlertsWarning": {
            "type": "integer",
            "description": "Number of warning security alerts",
            "readOnly": true,
            "example": 7
          },
          "systemAlertsCritical": {
            "type": "integer",
            "description": "Number of critical system alerts",
            "readOnly": true,
            "example": 6
          },
          "systemAlertsWarning": {
            "type": "integer",
            "description": "Number of warning system alerts",
            "readOnly": true,
            "example": 12
          },
          "epochSystemDate": {
            "type": "string",
            "description": "Epoch System Date",
            "readOnly": true,
            "example": "1693552728"
          },
          "hostTimezone": {
            "$ref": "#/components/schemas/systemHostTimezone"
          }
        }
      },
      "systemHostTimezone": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "Time zone",
            "example": "America"
          },
          "date": {
            "type": "string",
            "description": "Current Date and Time",
            "example": "Sep 1, 2023 3:36:57 AM"
          }
        }
      },
      "systemSecurityAlerts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Alert ID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "Alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true if alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemSystemAlerts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Alert ID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "notifyID": {
            "type": "string",
            "description": "Alert/event id",
            "readOnly": true,
            "example": "1001"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "type": {
            "type": "string",
            "description": "Notification type like Alert",
            "readOnly": true,
            "example": "Alert"
          },
          "category": {
            "type": "string",
            "description": "System, Security, Storage and Anomalies",
            "readOnly": true,
            "example": "System"
          },
          "severity": {
            "type": "string",
            "description": "warning or critical",
            "readOnly": true,
            "example": "critical"
          },
          "summary": {
            "type": "string",
            "description": "Notification Summary",
            "readOnly": true,
            "example": "Unable to unlock the CR Vault"
          },
          "description": {
            "type": "string",
            "description": "Notification Description",
            "readOnly": true,
            "example": "CR system was unable to unlock the vault"
          },
          "remedy": {
            "type": "string",
            "description": "Alert Remedy",
            "readOnly": true,
            "example": "1. Check the connections to the firewall or storage system 2. Have any ssh/security/logins been updated on the storage or firewall settings 3. Check switch/network connections to/from vault 4. Contact Joey"
          },
          "postTo": {
            "type": "string",
            "description": "string",
            "readOnly": true,
            "example": "SMTP"
          },
          "notes": {
            "type": "string",
            "description": "Acknowledged description",
            "example": "Password is changed"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Will be true of alert is acknowedged",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "UserID",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "createdByService": {
            "type": "string",
            "description": "USVC Name",
            "readOnly": true,
            "example": "mgmtdd"
          },
          "creationDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "readOnly": true,
            "example": "1515488384"
          },
          "updatedBy": {
            "type": "string",
            "description": "Acknowledged user id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Epoch Timestamp",
            "example": "1516488384"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemVaultJobs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "The ID of the policy that owns this job",
            "example": "5cccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "copy"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who  created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemTasks"
            }
          },
          "storageDataIP": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/systemJobAction"
          },
          "storagePwId": {
            "type": "string"
          }
        }
      },
      "systemTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new task",
            "example": "5cccccccccccccccccccccc"
          },
          "jobID": {
            "type": "string",
            "description": "The ID of the job that owns this task"
          },
          "order": {
            "type": "integer",
            "example": 1
          },
          "svcName": {
            "type": "string",
            "description": "Name of the microservice performing the task",
            "example": "mgmtdds"
          },
          "taskAction": {
            "type": "string",
            "description": "Type of task action to run",
            "example": "sandbox-create"
          },
          "resumable": {
            "type": "boolean"
          },
          "taskStatus": {
            "type": "string",
            "example": "Success"
          },
          "taskStatusDetail": {
            "type": "string",
            "description": "Task status details",
            "example": "Task completed successfully."
          },
          "taskProgress": {
            "type": "number",
            "example": 100
          },
          "taskWeight": {
            "type": "number",
            "example": 100
          },
          "startTime": {
            "type": "string",
            "example": "1690531200"
          },
          "endTime": {
            "type": "string",
            "example": "1690531200"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "taskActionDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemTaskActionDataList"
            }
          }
        }
      },
      "systemTaskActionDataList": {
        "type": "object",
        "properties": {
          "vaultDDReplCtx": {
            "type": "string"
          },
          "sourceDDReplCtx": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "vaultDDReplEthInterface": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtId": {
            "type": "string"
          },
          "ddMgmtNickName": {
            "type": "string"
          },
          "syncProgress": {
            "type": "number"
          },
          "syncMTreeReplStatus": {
            "type": "string"
          }
        }
      },
      "systemJobAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "actiondata": {
            "$ref": "#/components/schemas/systemActionData"
          },
          "policyID": {
            "type": "string"
          },
          "copyID": {
            "type": "string"
          },
          "sandboxName": {
            "type": "string"
          },
          "storageId": {
            "type": "string"
          },
          "recoveryMtree": {
            "type": "string"
          },
          "recoveryEthPort": {
            "type": "string"
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          },
          "storageUser": {
            "type": "string"
          },
          "storagePassword": {
            "type": "string"
          },
          "mountAction": {
            "type": "string"
          },
          "mtreeContentFormat": {
            "type": "string"
          },
          "reverseSyncMtree": {
            "type": "string"
          },
          "reverseSyncEthPort": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "systemActionData": {
        "type": "object",
        "properties": {
          "csnstorageInterfaces": {
            "$ref": "#/components/schemas/systemCsnStorageInterfaces"
          },
          "multilinkObjsToCreate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemMultilinks"
            }
          },
          "multilinkObjsToDelete": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemMultilinks"
            }
          },
          "multilinkObjsToRetry": {
            "type": "string",
            "example": null
          },
          "multilinkObjsToUpdate": {
            "type": "string",
            "example": null
          }
        }
      },
      "systemCsnStorageInterfaces": {
        "type": "object",
        "properties": {
          "CSNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemCsNetInterfaces"
            }
          },
          "StorageNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemStorageNetInterfaces"
            }
          }
        }
      },
      "systemStorageNetInterfaces": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemStorageInterfaces"
            }
          }
        }
      },
      "systemStorageInterfaces": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string"
          },
          "interfaceSpeed": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supportedSpeeds": {
            "type": "string"
          },
          "hasParentInterface": {
            "type": "boolean"
          },
          "isParentInterface": {
            "type": "boolean"
          }
        }
      },
      "systemCsNetInterfaces": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string"
          },
          "interfaceSpeed": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supportedSpeeds": {
            "type": "string"
          }
        }
      },
      "systemMultilinks": {
        "type": "object",
        "properties": {
          "resubmit": {
            "type": "boolean",
            "example": false
          },
          "status": {
            "type": "string",
            "example": "Success"
          },
          "storageID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemMultilinksLinks"
            }
          }
        }
      },
      "systemMultilinksLinks": {
        "type": "object",
        "properties": {
          "connectivity": {
            "type": "string"
          },
          "csInterfaceIP": {
            "type": "string"
          },
          "csInterfaceName": {
            "type": "string"
          },
          "csInterfaceSpeed": {
            "type": "string"
          },
          "trueLinkSpeed": {
            "type": "string"
          },
          "storageInterfaceIP": {
            "type": "string"
          },
          "storageInterfaceName": {
            "type": "string"
          },
          "storageInterfaceSpeed": {
            "type": "string"
          }
        }
      },
      "systemSettings": {
        "type": "object",
        "properties": {
          "appsLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "notificationsLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "policiesLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "schedulesLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "storageLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "usersLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "vaultLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "vcenterLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          },
          "shelteredharborLogLevel": {
            "type": "string",
            "description": "INFO OR DEBUG",
            "example": "DEBUG"
          },
          "systemLogLevel": {
            "type": "string",
            "description": "INFO OR DEBUG",
            "example": "DEBUG"
          },
          "cloudLogLevel": {
            "type": "string",
            "description": "INFO OR DEBUG",
            "example": "DEBUG"
          },
          "edgeLogLevel": {
            "type": "string",
            "description": "INFO OR DEBUG",
            "example": "DEBUG"
          },
          "reportingLogLevel": {
            "type": "string",
            "description": "INFO or DEBUG",
            "example": "DEBUG"
          }
        }
      },
      "license": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "description": "An unique license ID for every installed site",
            "example": "91539818-dc13-4090-a804-c7bc0f979ae1"
          },
          "state": {
            "type": "string",
            "description": "license state",
            "example": "activated"
          },
          "expiresOn": {
            "type": "string",
            "description": "license expiration date in readable format",
            "example": "01-02-2006 15:04:05"
          },
          "epoche": {
            "type": "string",
            "description": "license expiration date epoche time",
            "example": "1519102419"
          }
        }
      },
      "postLicense": {
        "type": "object",
        "properties": {
          "fileLocation": {
            "type": "string",
            "description": "license file location",
            "example": "/cr/license"
          }
        }
      },
      "ddLicenses": {
        "type": "object",
        "example": "REPLICATION"
      },
      "replContexts": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "example": "mtree://myHost.domain.com/data/col1/myfs-mtree-repl"
          },
          "status": {
            "type": "string",
            "example": "normal"
          },
          "rlstatus": {
            "type": "string",
            "example": "enabled"
          },
          "rlmode": {
            "type": "string",
            "example": "none"
          }
        }
      },
      "svrDrContexts": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "example": "mtree://myHost.domain.com/data/col1/myfs-mtree-repl"
          },
          "status": {
            "type": "string",
            "example": "normal"
          },
          "rlstatus": {
            "type": "string",
            "example": "enabled"
          },
          "rlmode": {
            "type": "string",
            "example": "none"
          }
        }
      },
      "ddEthInterfaces": {
        "type": "object",
        "example": "ethV0"
      },
      "ReplContext": {
        "type": "object",
        "properties": {
          "mgmtddReplCtxName": {
            "type": "string",
            "example": "mtree://myHost.domain.com/data/col1/my-fs-mtree-repl"
          }
        }
      },
      "links": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "example": "Self"
          },
          "href": {
            "type": "string"
          }
        }
      },
      "actionsCreateSandbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "sandbox-create_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "createsandbox"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsCreateSandboxStorageData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsCreateSandboxStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/actionsCreateSandboxSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsCreateSandboxSubSandboxes"
            }
          }
        }
      },
      "actionsCreateSandboxSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsCreateSandboxSubSandboxes": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsCreateSandboxAppData": {
        "type": "object",
        "properties": {
          "includeFiles": {
            "type": "array",
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludeFiles": {
            "type": "array",
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "policyID": {
            "type": "string",
            "example": ""
          },
          "appID": {
            "type": "string",
            "description": "the ID of the app",
            "example": "6ccccccccccccccccccccccc"
          },
          "appName": {
            "type": "string",
            "example": "myHost.domain.com"
          },
          "copyName": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "PolicyJob": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "ddBoostApplication": {
            "type": "string"
          },
          "mtree": {
            "type": "string"
          },
          "nfsExportName": {
            "type": "string"
          },
          "sourceDDFQDN": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vaultDDFQDN": {
            "type": "string"
          },
          "storageDataIP": {
            "type": "string"
          }
        }
      },
      "policiesPostAnalyze": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "analyze_098765"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "analyze"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "appData": {
            "$ref": "#/components/schemas/policiesPostAnalyzeAppData"
          },
          "storageData": {
            "$ref": "#/components/schemas/policiesPostAnalyzeStorageData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesPostAnalyzeStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostnamestoexport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/policiesPostAnalyzeSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesPostAnalyzeSubSandboxes"
            }
          }
        }
      },
      "policiesPostAnalyzeSubSandboxes": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "policiesPostAnalyzeSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "policiesPostAnalyzeAppData": {
        "type": "object",
        "properties": {
          "includeFiles": {
            "type": "array",
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludeFiles": {
            "type": "array",
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "mtreeContentFormat": {
            "type": "string",
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "policyID": {
            "type": "string",
            "example": ""
          },
          "appID": {
            "type": "string",
            "description": "the ID of the app",
            "example": "6ccccccccccccccccccccccc"
          },
          "appName": {
            "type": "string",
            "example": "myHost.domain.com"
          },
          "copyName": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "PolicyJob": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "ddBoostApplication": {
            "type": "string"
          },
          "mtree": {
            "type": "string"
          },
          "nfsExportName": {
            "type": "string"
          },
          "sourceDDFQDN": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vaultDDFQDN": {
            "type": "string"
          },
          "storageDataIP": {
            "type": "string"
          }
        }
      },
      "policiesGetAnalyze": {
        "type": "object",
        "properties": {
          "analysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesAnalysis"
            }
          }
        }
      },
      "analysisReport": {
        "type": "object",
        "properties": {
          "Backup Server,Backupset ID,Backupset Root": {
            "type": "string",
            "example": "myHost.domain.com,myHost.domain.com_1527689828-0"
          }
        }
      },
      "analysisReportArray": {
        "type": "object",
        "properties": {
          "report": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/analysisReport"
            }
          }
        }
      },
      "actionsRecoverapp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverapp-788860"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverapp"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "appData": {
            "$ref": "#/components/schemas/actionsRecoverappAppData"
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsRecoverappStorageData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "storagePwId": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsLinkedRecoverapp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverapp-788860"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverapp"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsRecoverappStorageData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsRecoverappAppData": {
        "type": "object",
        "properties": {
          "includeFiles": {
            "type": "array",
            "example": [
              "nw.swp",
              "/nw/backup"
            ],
            "items": {
              "type": "string"
            }
          },
          "excludeFiles": {
            "type": "array",
            "example": [
              "nw.log",
              "/nw/tmp"
            ],
            "items": {
              "type": "string"
            }
          },
          "AppHostName": {
            "type": "string"
          },
          "AppVersion": {
            "type": "number"
          },
          "ProductionStorage": {
            "type": "string"
          },
          "ProductionStorageID": {
            "type": "string"
          },
          "TaskID": {
            "type": "string"
          },
          "VaultStorageIP": {
            "type": "string"
          },
          "backupHostsFile": {
            "type": "string"
          },
          "backupID": {
            "type": "string"
          },
          "configType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "powerProtectModel": {
            "type": "string"
          },
          "priorRecoveryCheck": {
            "type": "string"
          },
          "storage": {
            "$ref": "#/components/schemas/actionsRecoverappStorage"
          },
          "policy": {
            "$ref": "#/components/schemas/actionsRecoverappPolicy"
          },
          "vaultCredID": {
            "type": "string"
          },
          "storageSystem": {
            "$ref": "#/components/schemas/actionsRecoverappStorageSystem"
          },
          "mtreeContentFormat": {
            "type": "string",
            "description": "mention the type of the analysis data",
            "example": "filesystem"
          },
          "policyID": {
            "type": "string",
            "example": ""
          },
          "appID": {
            "type": "string",
            "description": "the ID of the app",
            "example": "6ccccccccccccccccccccccc"
          },
          "appName": {
            "type": "string",
            "example": "myHost.domain.com"
          },
          "copyName": {
            "type": "string",
            "description": "name of the copy",
            "example": "ir-pitname-2018010214083"
          },
          "jobID": {
            "type": "string",
            "description": "JobID which generated the alert/event",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "PolicyJob": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "ddBoostApplication": {
            "type": "string"
          },
          "mtree": {
            "type": "string"
          },
          "nfsExportName": {
            "type": "string"
          },
          "sourceDDFQDN": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vaultDDFQDN": {
            "type": "string"
          },
          "storageDataIP": {
            "type": "string"
          }
        }
      },
      "actionsRecoverappStorageSystem": {
        "type": "object",
        "properties": {
          "cleanableSizeGib": {
            "type": "string",
            "example": "5.36"
          },
          "ddfsRestart": {
            "type": "string",
            "example": "Required"
          },
          "compressionFactor": {
            "type": "number"
          },
          "compressionFactorPercentage": {
            "type": "string",
            "example": "99.9"
          },
          "fileStats": {
            "$ref": "#/components/schemas/actionsFileStats"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/actionsHostInfo"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "isSupportedStatsVersion": {
            "type": "boolean",
            "example": true
          },
          "isStatsAvailable": {
            "type": "boolean",
            "example": true
          },
          "physicalCapacity": {
            "$ref": "#/components/schemas/actionsPhysicalCapacity"
          },
          "logicalCapacity": {
            "$ref": "#/components/schemas/actionsLogicalCapacity"
          },
          "mtreeStats": {
            "$ref": "#/components/schemas/actionsMtreeStats"
          },
          "maxSupportedFiles": {
            "type": "integer",
            "example": 1000000000
          },
          "model": {
            "type": "string",
            "example": "DD VE"
          },
          "nickname": {
            "type": "string",
            "description": "storage resource name",
            "example": "myVaultDD"
          },
          "options": {
            "$ref": "#/components/schemas/actionsRecoverappOptions"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the storage resource",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "mgmtddStatus": {
            "type": "string",
            "example": "Ready"
          },
          "mgmtddVersion": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "ddboostStatus": {
            "type": "string",
            "example": "enabled"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "version": {
            "type": "string",
            "example": "Data Domain OS 7.6.0.5-683066"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "serialno": {
            "type": "string"
          }
        }
      },
      "actionsRecoverappOptions": {
        "type": "object",
        "properties": {
          "criticalSpaceUsage": {
            "type": "number"
          },
          "warningSpaceUsage": {
            "type": "number"
          }
        }
      },
      "actionsRecoverappStorage": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          }
        }
      },
      "actionsRecoverappPolicy": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "numCopies": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "bypasssyntheticoptim": {
            "type": "boolean"
          },
          "analyzeindexasid": {
            "type": "string"
          }
        }
      },
      "actionsRecoverappStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/actionsRecoverappSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsRecoverappSubSandboxes"
            }
          }
        }
      },
      "actionsRecoverappSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsRecoverappSubSandboxes": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "policiesAnalyzeJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "analyze_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "analyze"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesRecoverappJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverapp_722167"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverapp"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "storagePwId": {
            "type": "string"
          }
        }
      },
      "policiesRecoveryCheckJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recovercheck_264589"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverycheck"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesNetworkerRecoveryCheckJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recovercheck_264589"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverapp"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "storagePwId": {
            "type": "string"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesRecoverToAlternateJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "recoverToAlternate_674320"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "recoverToAlternate"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "storagePwId": {
            "type": "string"
          },
          "storageID": {
            "type": "string"
          }
        }
      },
      "actionsAnalyze": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5cccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "analyze_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5cccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the copy created (if applicable)",
            "example": "5cccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "analyze"
          },
          "appID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "sandboxID": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "sandboxMountSource": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "example": "0"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5cccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsTasks"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/actionsAnalyzeStorageData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "storageDataIP": {
            "type": "string"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/actionsAction"
          }
        }
      },
      "actionsAnalyzeStorageData": {
        "type": "object",
        "properties": {
          "hostnamesToExport": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sandboxData": {
            "$ref": "#/components/schemas/actionsAnalyzeSandboxData"
          },
          "subSandboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionsAnalyzeSubSandboxes"
            }
          }
        }
      },
      "actionsAnalyzeSandboxData": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "actionsAnalyzeSubSandboxes": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "bypassSyntheticOptim": {
            "type": "boolean"
          },
          "combined": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "string"
          },
          "copyid": {
            "type": "string"
          },
          "storageUser": {
            "type": "string",
            "description": "ddboost storage user",
            "example": "ddboost-user"
          },
          "id": {
            "type": "string"
          },
          "jobid": {
            "type": "string"
          },
          "mountHost": {
            "type": "string"
          },
          "mountSource": {
            "type": "string",
            "example": "myHost.domain.com:/data/col1/cr-cs_sandbox"
          },
          "name": {
            "type": "string"
          },
          "policyid": {
            "type": "string"
          },
          "subSandboxIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uberSandbox": {
            "type": "boolean"
          }
        }
      },
      "systemCreateBundle": {
        "type": "object",
        "properties": {
          "bundleName": {
            "type": "string",
            "example": "cr_support_bundle-19.10.0.0.00-20211201075139.tar.gz"
          },
          "bundleMessage": {
            "type": "string",
            "example": "Support bundle creation initialized successfully at default location"
          }
        }
      },
      "bundleMessage": {
        "type": "object",
        "properties": {
          "bundleName": {
            "type": "string",
            "example": "cr_support_bundle-19.10.0.0.00-20211201075139.tar.gz"
          },
          "bundleMessage": {
            "type": "string",
            "example": "Support bundle creation initialized successfully at default location"
          }
        }
      },
      "systemInitiateBundle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "Name of support log bundle",
            "readOnly": true,
            "example": "cr_support_bundle-19.10.0.0.00-20211203080216.tar.gz"
          },
          "status": {
            "type": "string",
            "description": "bundle status",
            "readOnly": true,
            "example": "Running"
          },
          "size": {
            "type": "string",
            "description": "Size of support bundle initially it will be 0",
            "readOnly": true,
            "example": "0"
          },
          "createdby": {
            "type": "string",
            "description": "User id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationdate": {
            "type": "string",
            "description": "Vcenter resource name",
            "readOnly": true,
            "example": "1638536536"
          },
          "checksum": {
            "type": "string",
            "description": "Checksum of the bundle ,verify before extract",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "details": {
            "type": "string",
            "description": "Bundle status initilly Running other status are success,failure,partial",
            "readOnly": true,
            "example": "running"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemGetBundle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "name": {
            "type": "string",
            "description": "Name of support log bundle",
            "readOnly": true,
            "example": "cr_support_bundle-19.10.0.0.00-20211203080216.tar.gz"
          },
          "status": {
            "type": "string",
            "description": "bundle status",
            "readOnly": true,
            "example": "Running"
          },
          "size": {
            "type": "string",
            "description": "Size of support bundle initially it will be 0",
            "readOnly": true,
            "example": "0"
          },
          "createdby": {
            "type": "string",
            "description": "User id",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationdate": {
            "type": "string",
            "description": "Vcenter resource name",
            "readOnly": true,
            "example": "1638536536"
          },
          "checksum": {
            "type": "string",
            "description": "Checksum of the bundle ,verify before extract",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "details": {
            "type": "string",
            "description": "Bundle status initilly Running other status are success,failure,partial",
            "readOnly": true,
            "example": "running"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "systemGetBundles": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemGetBundle"
            }
          }
        }
      },
      "systemDetails": {
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemServiceDetails"
            }
          }
        }
      },
      "systemServiceDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "cr_swagger"
          },
          "state": {
            "type": "string",
            "description": "Shows the state of the service",
            "example": "running"
          },
          "uptime": {
            "type": "string",
            "description": "Displays the up time fo the service",
            "example": "Up 35 minutes"
          }
        }
      },
      "notificationsGetAlerts": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notificationsGetAlert"
            }
          }
        }
      },
      "notificationsGetEvents": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notificationsGetEvent"
            }
          }
        }
      },
      "notificationsCriticalAlerts": {
        "type": "object",
        "properties": {
          "acknowledgeCount": {
            "minimum": 0,
            "type": "integer"
          },
          "unacknowledgeCount": {
            "minimum": 0,
            "type": "integer"
          },
          "totalCount": {
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "notificationsWarningAlerts": {
        "type": "object",
        "properties": {
          "acknowledgeCount": {
            "minimum": 0,
            "type": "integer"
          },
          "unacknowledgeCount": {
            "minimum": 0,
            "type": "integer"
          },
          "totalCount": {
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "notificationsGetAlertsCount": {
        "type": "object",
        "properties": {
          "totalAcknowledgedCount": {
            "minimum": 0,
            "type": "integer"
          },
          "totalUnacknowledgedCount": {
            "minimum": 0,
            "type": "integer"
          },
          "totalCount": {
            "minimum": 0,
            "type": "integer"
          },
          "CriticalAlert": {
            "type": "object",
            "$ref": "#/components/schemas/notificationsCriticalAlerts"
          },
          "WarningAlert": {
            "type": "object",
            "$ref": "#/components/schemas/notificationsWarningAlerts"
          }
        }
      },
      "jobs": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/job"
            }
          }
        }
      },
      "policiesGetJobs": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetJob"
            }
          }
        }
      },
      "policiesGetPolicyJobs": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetPolicyJob"
            }
          }
        }
      },
      "policiesGetPolicyJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageID": {
            "type": "string"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CopyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "string",
            "description": "What the user requested in the job",
            "example": "copy"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app",
            "example": "5ccccccccccccccccccccccc"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "jobWindow": {
            "type": "integer",
            "example": 0
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "sandboxID": {
            "type": "string",
            "example": "5ccccccccccccccccccccccc"
          },
          "storageDataIP": {
            "type": "string"
          },
          "storagePwId": {
            "type": "string"
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "policiesGetCopies": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetCopy"
            }
          }
        }
      },
      "policiesGetSandboxes": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesGetSandbox"
            }
          }
        }
      },
      "licenseResponse": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Trial",
              "Activated",
              "Expired",
              "Invalid",
              "Eval"
            ]
          },
          "expiresOn": {
            "type": "string",
            "readOnly": true
          },
          "epoch": {
            "type": "string",
            "readOnly": true
          },
          "softwareVersion": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "softwareId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "systemGetLicense": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Trial",
              "Activated",
              "Expired",
              "Invalid",
              "Eval"
            ]
          },
          "expiresOn": {
            "type": "string",
            "readOnly": true
          },
          "epoch": {
            "type": "string",
            "readOnly": true
          },
          "softwareVersion": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "softwareId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "systemSetLicense": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Trial",
              "Activated",
              "Expired",
              "Invalid",
              "Eval"
            ]
          },
          "expiresOn": {
            "type": "string",
            "readOnly": true
          },
          "epoch": {
            "type": "string",
            "readOnly": true
          },
          "softwareVersion": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "softwareId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "systemSetLicenseRequestBody": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The license file to upload",
            "format": "binary"
          }
        }
      },
      "policiesPutCopiesRequestBody": {
        "type": "object",
        "properties": {
          "copyids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "policiesDeleteCopiesRequestBody": {
        "type": "object",
        "properties": {
          "copyids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "notificationsAcknowledgeAlertsRequestBody": {
        "type": "object",
        "properties": {
          "alertids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "notificationsUnacknowledgeAlertsRequestBody": {
        "type": "object",
        "properties": {
          "alertids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "policiesPutCopies": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the operation",
            "example": "Success"
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesPutCopiesJobs"
            }
          }
        }
      },
      "policiesPutCopiesJobs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "daily_sync"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "policyName": {
            "type": "string",
            "description": "Name of the associated policy",
            "example": "nw2"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "string",
            "description": "User requested job",
            "example": "copy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/policiesStorageData"
          }
        }
      },
      "policiesStorageData": {
        "type": "object",
        "properties": {
          "copiesWithData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesCopiesWithData"
            }
          },
          "uberCopies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "policiesCopiesWithData": {
        "type": "object",
        "properties": {
          "copyID": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "parentID": {
            "type": "string"
          }
        }
      },
      "policiesAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "copyID": {
            "type": "string",
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "copiesDaysExpire": {
            "type": "number"
          },
          "jobsDaysExpire": {
            "type": "number"
          },
          "alertsDaysExpire": {
            "type": "number"
          },
          "eventsDaysExpire": {
            "type": "number"
          },
          "drBackupDaysExpire": {
            "type": "number"
          },
          "sandboxName": {
            "type": "string"
          },
          "mtreeContentFormat": {
            "type": "string"
          },
          "mountAction": {
            "type": "string"
          },
          "storageUser": {
            "type": "string"
          },
          "storagePassword": {
            "type": "string"
          },
          "storageId": {
            "type": "string"
          },
          "recoveryMtree": {
            "type": "string"
          },
          "recoveryEthPort": {
            "type": "string"
          },
          "reverseSyncMtree": {
            "type": "string"
          },
          "reverseSyncEthPort": {
            "type": "string"
          },
          "retLockDuration": {
            "type": "string",
            "description": "retention lock duration",
            "example": "7d"
          },
          "includefiles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludefiles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fullScanPeriodDays": {
            "type": "integer",
            "readOnly": true,
            "description": " frequency of full scan",
            "example": "14"
          },
          "enableDailyFullScan": {
            "type": "boolean",
            "readOnly": true,
            "description": "DBA value",
            "example": true
          },
          "actiondata": {
            "$ref": "#/components/schemas/policiesActionActionData"
          },
          "bootstrapFolder": {
            "type": "string"
          }
        }
      },
      "policiesActionActionData": {
        "type": "object",
        "properties": {
          "csnstorageInterfaces": {
            "$ref": "#/components/schemas/policiesActionInterfaces"
          },
          "multilinkObjsToCreate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionMultilink"
            }
          },
          "multilinkObjsToDelete": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionMultilink"
            }
          },
          "multilinkObjsToRetry": {
            "type": "string"
          },
          "multilinkObjsToUpdate": {
            "type": "string"
          }
        }
      },
      "policiesActionInterfaces": {
        "type": "object",
        "properties": {
          "CSNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionCsNetInterfaces"
            }
          },
          "StorageNetInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionStorageNetInterfaces"
            }
          }
        }
      },
      "policiesActionStorageNetInterfaces": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionStorageInterfaces"
            }
          }
        }
      },
      "policiesActionStorageInterfaces": {
        "type": "object",
        "properties": {
          "hasParentInterface": {
            "type": "boolean"
          },
          "interface": {
            "type": "string"
          },
          "interfaceSpeed": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supportedSpeeds": {
            "type": "string"
          },
          "isParentInterface": {
            "type": "boolean"
          }
        }
      },
      "policiesActionCsNetInterfaces": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string"
          },
          "interfaceSpeed": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supportedSpeeds": {
            "type": "string"
          }
        }
      },
      "policiesActionMultilink": {
        "type": "object",
        "properties": {
          "resubmit": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "storageid": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesActionMultilinksLinks"
            }
          }
        }
      },
      "policiesActionMultilinksLinks": {
        "type": "object",
        "properties": {
          "connectivity": {
            "type": "string"
          },
          "csinterfaceip": {
            "type": "string"
          },
          "csinterfacename": {
            "type": "string"
          },
          "csinterfacespeed": {
            "type": "string"
          },
          "storageinterfaceip": {
            "type": "string"
          },
          "storageinterfacename": {
            "type": "string"
          },
          "storageinterfacespeed": {
            "type": "string"
          },
          "truelinkspeed": {
            "type": "string"
          }
        }
      },
      "policiesTasks": {
        "type": "object",
        "properties": {
          "jobID": {
            "type": "string",
            "description": "The ID of the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "svcName": {
            "type": "string",
            "description": "Name of the microservice performing the task",
            "example": "mgmtdds"
          },
          "taskAction": {
            "type": "string",
            "description": "Type of task action to run",
            "example": "sandbox-create"
          },
          "resumable": {
            "type": "boolean"
          },
          "taskStatus": {
            "type": "string",
            "example": "Success"
          },
          "taskStatusDetail": {
            "type": "string",
            "description": "Task status details",
            "example": "Task completed successfully."
          },
          "taskProgress": {
            "type": "number",
            "example": 100
          },
          "order": {
            "type": "number",
            "example": 1
          },
          "taskWeight": {
            "type": "number",
            "example": 100
          },
          "startTime": {
            "type": "string",
            "example": "1690531200"
          },
          "endTime": {
            "type": "string",
            "example": "1690531200"
          },
          "elapsedTime": {
            "type": "string",
            "example": "0"
          },
          "taskActionDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasksTaskActionDataList"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "policiesTasksTaskActionDataList": {
        "type": "object",
        "properties": {
          "vaultDDReplCtx": {
            "type": "string"
          },
          "sourceDDReplCtx": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "vaultDDReplEthInterface": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtId": {
            "type": "string"
          },
          "ddMgmtNickName": {
            "type": "string"
          },
          "syncProgress": {
            "type": "number"
          },
          "syncMTreeReplStatus": {
            "type": "string"
          }
        }
      },
      "policiesReverseSyncJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "reverseSync_098765"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "Recovery"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "reverseSync"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Indicates the user who created the job",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesCleanupJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "cleaning-schedule_00EF2D"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "System"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "cleaning-schedule_00EF2D"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesConfigureMultilinkJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "configure-multilink_895469"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "System"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "configure-multilink"
          },
          "appID": {
            "type": "string",
            "description": "The ID of the app for which sandbox is getting created"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesDrbackupJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job",
            "example": "drbackup-schedule_095678"
          },
          "jobType": {
            "type": "string",
            "description": "Type of the job",
            "example": "System"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the copy created (if applicable)",
            "example": "5ccccccccccccccccccccccc"
          },
          "request": {
            "type": "string",
            "description": "User requested action",
            "example": "drbackup-schedule"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "Latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "Epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "Epoch time when job ended",
            "example": "1529996996"
          },
          "elapsedTime": {
            "type": "string",
            "description": "Time since job started in seconds",
            "example": "57m"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "enforceJobWindow": {
            "type": "boolean"
          },
          "jobWindow": {
            "type": "number",
            "description": "How long (in hours) to keep Vault open for replication",
            "example": 0
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          }
        }
      },
      "policiesDeleteCopies": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the new job",
            "example": "5ccccccccccccccccccccccc"
          },
          "jobName": {
            "type": "string",
            "description": "name of the job",
            "example": "deletecopy_230934"
          },
          "jobType": {
            "type": "string",
            "description": "type of the job",
            "example": "Protection"
          },
          "policyID": {
            "type": "string",
            "description": "Policy ID associated with the job",
            "example": "5ccccccccccccccccccccccc"
          },
          "copyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "string",
            "description": "what the user requested in the job",
            "example": "deletecopy"
          },
          "progress": {
            "type": "string",
            "example": "50%"
          },
          "status": {
            "type": "string",
            "description": "latest status of the job",
            "example": "Completed"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the app resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "startTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "numOfTasks": {
            "type": "integer",
            "example": 1
          },
          "currTaskNum": {
            "type": "integer",
            "example": 0
          },
          "taskName": {
            "type": "string",
            "example": "copy"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/policiesTasks"
            }
          },
          "statusDetail": {
            "type": "string",
            "description": "detail about the recent job status"
          },
          "endTime": {
            "type": "string",
            "description": "epoch time when job started",
            "example": "1529996996"
          },
          "jobWindow": {
            "type": "number",
            "example": 0
          },
          "elapsedTime": {
            "type": "string",
            "example": "57m"
          },
          "action": {
            "$ref": "#/components/schemas/policiesAction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "storageData": {
            "$ref": "#/components/schemas/policiesStorageData"
          }
        }
      },
      "versions": {
        "type": "object",
        "properties": {
          "CRServices": {
            "$ref": "#/components/schemas/versionsCrServices"
          },
          "RESTAPI": {
            "type": "array",
            "example": [
              "v8",
              "v7",
              "v6"
            ],
            "items": {
              "type": "string"
            }
          },
          "storage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versionsStorage"
            }
          },
          "vcenter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versionsVcenters"
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versionsApps"
            }
          }
        }
      },
      "versionsCrServices": {
        "required": [
          "apps",
          "edge",
          "notifications",
          "policies",
          "schedules",
          "storage",
          "system",
          "users",
          "vault",
          "vcenter",
          "reporting",
          "iam-gateway",
          "keycloak",
          "secretsmgr",
          "shelteredharbor"
        ],
        "type": "object",
        "properties": {
          "apps": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "edge": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "policies": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "users": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "notifications": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "storage": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "system": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "vault": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "schedules": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "vcenter": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "reporting": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "iam-gateway": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "keycloak": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "secretsmgr": {
            "type": "string",
            "example": "19.8.0.2-154"
          },
          "shelteredharbor": {
            "type": "string",
            "example": "19.8.0.2-154"
          }
        }
      },
      "versionsApps": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "7.0.0.0"
            },
            "type": {
              "type": "string",
              "example": "Networker"
            },
            "engineId": {
              "type": "string"
            }
          }
        }
      },
      "versionsVcenters": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "7.0.0.0"
            }
          }
        }
      },
      "versionsStorage": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "Data Domain OS 7.6.0.5-683066"
            },
            "nfs_config": {
              "$ref": "#/components/schemas/versionsNfsConfig"
            }
          }
        }
      },
      "versionsNfsConfig": {
        "type": "object",
        "properties": {
          "default-export-version": {
            "type": "string",
            "example": "3"
          },
          "default-server-version": {
            "type": "string",
            "example": "3"
          },
          "nfs4-grace-period": {
            "type": "string",
            "example": "30"
          },
          "nfs4-lease-interval": {
            "type": "string",
            "example": "300"
          },
          "mountd-port": {
            "type": "string",
            "example": "2052"
          },
          "nfs4-port": {
            "type": "string",
            "example": "2049"
          },
          "nfs3-port": {
            "type": "string",
            "example": "2049"
          },
          "nfs4-idmap-out-numeric": {
            "type": "string",
            "example": "map-first"
          },
          "nfs4-idmap-active-directory": {
            "type": "string",
            "example": "disabled"
          },
          "nfs4-acls": {
            "type": "string",
            "example": "disabled"
          },
          "default-root-squash": {
            "type": "string",
            "example": "enabled"
          },
          "force-minimum-root-squash-default": {
            "type": "string",
            "example": "disabled"
          },
          "report-mtree-quota": {
            "type": "string",
            "example": "disabled"
          },
          "nfs-server-versions": {
            "type": "string",
            "example": "3"
          }
        }
      },
      "appsInfo": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "7.0.0.0"
            },
            "type": {
              "type": "string",
              "example": "Networker"
            }
          }
        }
      },
      "versionInfo": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "Data Domain OS 7.6.0.5-683066"
            },
            "nfs_config": {
              "type": "object",
              "properties": {
                "default-export-version": {
                  "type": "string",
                  "example": "3"
                },
                "default-server-version": {
                  "type": "string",
                  "example": "3"
                },
                "nfs4-grace-period": {
                  "type": "string",
                  "example": "30"
                },
                "nfs4-lease-interval": {
                  "type": "string",
                  "example": "300"
                },
                "mountd-port": {
                  "type": "string",
                  "example": "2052"
                },
                "nfs4-port": {
                  "type": "string",
                  "example": "2049"
                },
                "nfs3-port": {
                  "type": "string",
                  "example": "2049"
                },
                "nfs4-idmap-out-numeric": {
                  "type": "string",
                  "example": "map-first"
                },
                "nfs4-idmap-active-directory": {
                  "type": "string",
                  "example": "disabled"
                },
                "nfs4-acls": {
                  "type": "string",
                  "example": "disabled"
                },
                "default-root-squash": {
                  "type": "string",
                  "example": "enabled"
                },
                "force-minimum-root-squash-default": {
                  "type": "string",
                  "example": "disabled"
                },
                "report-mtree-quota": {
                  "type": "string",
                  "example": "disabled"
                },
                "nfs-server-versions": {
                  "type": "string",
                  "example": "3"
                }
              }
            }
          }
        }
      },
      "vcenterInfo": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "example": "7.0.0.0"
            }
          }
        }
      },
      "vCentersGetVcenters": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vCentersGetVcenter"
            }
          }
        }
      },
      "vCentersUpdateVcenter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersUpdateVcenterInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the vcenter resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vCentersGetVcenterById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersGetVcenterByIdInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the vcenter resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vCentersCreateVcenter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersCreateVcenterInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the vcenter resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vCentersGetVcenter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersGetVcenterInfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the vcenter resource",
            "readOnly": true,
            "example": "5ccccccccccccccccccccccc"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vCentersCreateVcenterRequestBody": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersCreateVcenterRequestBodyInfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vCentersUpdateVcenterRequestBody": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "vcenter resource name",
            "example": "myVaultVcenter"
          },
          "vcenterinfo": {
            "$ref": "#/components/schemas/vCentersUpdateVcenterRequestBodyInfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "vcenterinfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "vCentersUpdateVcenterRequestBodyInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "vCentersCreateVcenterRequestBodyInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "vCentersUpdateVcenterInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "storeID": {
            "type": "string",
            "example": "2F61375173"
          }
        }
      },
      "vCentersGetVcenterByIdInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "storeID": {
            "type": "string",
            "example": "2F61375173"
          }
        }
      },
      "vCentersGetVcenterInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "storeID": {
            "type": "string",
            "example": "2F61375173"
          }
        }
      },
      "vCentersCreateVcenterInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "vcenter1.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "storeID": {
            "type": "string",
            "example": "2F61375173"
          }
        }
      },
      "policiesGetTypes": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "PPDM, SHELTEREDHARBOR, STANDARD"
            }
          }
        }
      },
      "systemGetDrbackups": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "cr.19.6.0.1-97.2020-09-01.08_19_28.tar.gz"
          },
          "modtime": {
            "type": "string",
            "example": "Sep 01, 2020, 08:19:32"
          },
          "creationdate": {
            "type": "string",
            "description": "Date the backup was created",
            "example": "Sep 09, 2023, 00:01:15"
          }
        }
      },
      "cloudsaccountinfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname or IP of the Vcenter",
            "example": "cloud.dell.com"
          },
          "username": {
            "type": "string",
            "example": "administrator"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "postcloudaccount": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "Cloud account nickname",
            "example": "mycloudaccount"
          },
          "cloudaccountinfo": {
            "$ref": "#/components/schemas/cloudsaccountinfo"
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "cloudaccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "5aaaaaaaaaaaaaaaaaaaaaae"
          },
          "nickname": {
            "type": "string",
            "description": "Cloud account nickname",
            "example": "mycloudaccount"
          },
          "cloudaccountinfo": {
            "$ref": "#/components/schemas/cloudsaccountinfo"
          },
          "createdBy": {
            "type": "string",
            "description": "who created the cloud account resource",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-17T17:34:17.187Z"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          },
          "tags": {
            "type": "array",
            "example": [
              "tag",
              "tags"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "cloudaccounts": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cloudaccount"
            }
          }
        }
      },
      "securityrulesupdateobj": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "reportingGetReportsConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingGetReportsFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingJobTypeVsRequest": {
        "type": "object",
        "properties": {
          "Protection": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "System": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Recovery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingGetReportsFilters": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "JobTypeVsRequest": {
            "$ref": "#/components/schemas/reportingJobTypeVsRequest"
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevelList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "averageFileChangeRate": {
            "type": "integer"
          },
          "syncDuration": {
            "type": "integer",
            "items": {
              "type": "string"
            }
          },
          "syncStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer",
            "items": {
              "type": "string"
            }
          },
          "analysisStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetSelection": {
            "type": "string"
          },
          "assetSelectionLevel": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetReportsAssets"
            }
          }
        }
      },
      "reportingReportDuration": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "Report range for last few hours",
            "example": 0
          },
          "days": {
            "type": "integer",
            "description": "Report range for last few days",
            "example": 1
          }
        }
      },
      "reportingGetSyncReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "sync_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingGetSyncReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingGetSyncReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "string",
            "example": "OK"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "syncDuration": {
            "type": "integer",
            "example": 0
          },
          "syncStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetSyncReportAssets"
            }
          }
        }
      },
      "reportingGetAnalyzeReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "analyze_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingGetAnalyzeReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingGetAnalyzeReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer",
            "example": 0
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetAnalyzeReportAssets"
            }
          },
          "cyberSenseHost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingGetAnalyzeReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetAnalyzeReportPolicyMtrees"
            }
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          }
        }
      },
      "reportingGetAnalyzeReportPolicyMtrees": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyStatus": {
            "type": "string"
          },
          "replMtrees": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "reportingGetJobsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingGetJobsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingGetJobsReportFilters": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "JobTypeVsRequest": {
            "$ref": "#/components/schemas/reportingJobTypeVsRequest"
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingPreviewJobsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingPreviewJobsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingPreviewJobsReportFilters": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "JobTypeVsRequest": {
            "type": "object"
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingGetReportsAssets": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetReportsPolicyMtrees"
            }
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          }
        }
      },
      "reportingGetReportsPolicyMtrees": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyStatus": {
            "type": "string"
          },
          "replMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          }
        }
      },
      "reportingGetSyncReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          }
        }
      },
      "reportingGetAnalyzeReportsAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          }
        }
      },
      "reportingTemplateConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingTemplateFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingTemplateFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "$ref": "#/components/schemas/reportingJobTypeVsRequest"
          },
          "cyberSenseHost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "analyzeDuration": {
            "type": "integer",
            "example": 0
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assetSelection": {
            "type": "string"
          },
          "assetSelectionLevel": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevelList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "reportingTemplateAssets"
            }
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "syncDuration": {
            "type": "integer"
          },
          "syncStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingTemplateAssets": {
        "type": "object",
        "properties": {
          "mgmtDDHostName": {
            "type": "string"
          },
          "mgmtDDHostNickName": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingReportDelivery": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "example": "email"
          },
          "settings": {
            "$ref": "#/components/schemas/reportingReportEmailDelivery"
          }
        }
      },
      "reportingReportEmailDelivery": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "TestEmailSubject"
          },
          "message": {
            "type": "string",
            "example": "TestEmailMessage"
          },
          "emailOption": {
            "type": "string",
            "example": "attachment"
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "email@xyz.com"
            }
          }
        }
      },
      "reportingReportReqFlat": {
        "type": "object",
        "properties": {
          "reportName": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetReportsConfig"
          }
        }
      },
      "reportingPreviewJobsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "reportBaseName": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingPreviewJobsReportSummaryData"
          },
          "data": {
            "$ref": "#/components/schemas/reportingPreviewJobsReportData"
          },
          "config": {
            "$ref": "#/components/schemas/reportingPreviewJobsReportConfig"
          }
        }
      },
      "reportingPreviewJobsReportSummaryData": {
        "type": "object",
        "properties": {
          "jobcounts": {
            "type": "object",
            "properties": {
              "canceled": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "canceling": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "critical": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "running": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "success": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "warning": {
                "$ref": "#/components/schemas/reportingJobCounts"
              },
              "totalcountbyjobstatus": {
                "$ref": "#/components/schemas/reportingJobCounts"
              }
            }
          }
        }
      },
      "reportingCreateCsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingCreateCsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingCreateCsReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingCreateCsReportAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingCreateSyncReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "sync_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingCreateSyncReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingCreateSyncReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "string",
            "example": "OK"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "syncDuration": {
            "type": "integer",
            "example": 0
          },
          "syncStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingCreateSyncReportAssets"
            }
          }
        }
      },
      "reportingCreateAnalyzeReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "analyze_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingCreateAnalyzeReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingCreateAnalyzeReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer",
            "example": 0
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingCreateAnalyzeReportAssets"
            }
          },
          "cyberSenseHost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingCreateCsReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "reportingCreateSyncReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          }
        }
      },
      "reportingCreateAnalyzeReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          }
        }
      },
      "reportingConfigurableResponse": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/reportingReportConfigurableDetails"
          }
        },
        "example": {
          "settings": [
            {
              "component": "jobs",
              "format": "csv",
              "delivery": {
                "method": [
                  "email"
                ]
              },
              "reportDuration": [
                {
                  "hours": 0,
                  "days": 1
                }
              ],
              "filters": {
                "JobTypeVsRequest": {
                  "Protection": [
                    "stopreplication",
                    "sync",
                    "sync-copy",
                    "shelteredharborcopy",
                    "copy",
                    "securecopy",
                    "securecopyanalyze",
                    "deletecopy",
                    "sync-copy-lock",
                    "analyze",
                    "startreplication",
                    "initialsync",
                    "lock",
                    "copy-lock"
                  ],
                  "Recovery": [
                    "recoverToAlternate",
                    "recoverapp",
                    "sandbox-delete",
                    "recoverycheck",
                    "sandbox-create",
                    "createsandbox",
                    "deletesandbox",
                    "recoverappPPDM",
                    "reverseSync"
                  ],
                  "System": [
                    "drbackup-schedule",
                    "cleaning-schedule",
                    "configure-multilink"
                  ]
                },
                "jobType": [
                  "Protection",
                  "Recovery",
                  "System"
                ],
                "request": [
                  "stopreplication",
                  "sync",
                  "sync-copy",
                  "shelteredharborcopy",
                  "copy",
                  "securecopy",
                  "securecopyanalyze",
                  "deletecopy",
                  "sync-copy-lock",
                  "analyze",
                  "startreplication",
                  "initialsync",
                  "lock",
                  "copy-lock",
                  "recoverToAlternate",
                  "recoverapp",
                  "sandbox-delete",
                  "recoverycheck",
                  "sandbox-create",
                  "createsandbox",
                  "deletesandbox",
                  "recoverappPPDM",
                  "reverseSync",
                  "drbackup-schedule",
                  "cleaning-schedule",
                  "configure-multilink"
                ],
                "status": [
                  "Running",
                  "Critical",
                  "Warning",
                  "Success",
                  "Canceling",
                  "Canceled"
                ]
              }
            },
            {
              "component": "cs_license_utilization",
              "format": "csv",
              "delivery": {
                "method": [
                  "email"
                ]
              },
              "reportDuration": [
                {
                  "hours": 0,
                  "days": 1
                }
              ],
              "filters": {
                "assetSelectionLevel": [
                  "all",
                  "custom"
                ],
                "reportDetailLevelList": [
                  "servers",
                  "frontEndHosts"
                ],
                "assets": [
                  {
                    "appID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                    "frontEndHosts": [
                      "myHost.domain.com",
                      "myHost.domain.com",
                      "myHost.domain.com",
                      "myHost.domain.com"
                    ],
                    "hostName": "myHost.domain.com",
                    "nickName": "IE"
                  }
                ],
                "capacityStatus": [
                  "Exceeded",
                  "OK"
                ]
              }
            },
            {
              "component": "sync_jobs",
              "format": "csv",
              "delivery": {
                "method": [
                  "email"
                ]
              },
              "reportDuration": [
                {
                  "hours": 0,
                  "days": 1
                }
              ],
              "filters": {
                "assetSelectionLevel": [
                  "all",
                  "custom"
                ],
                "assets": [
                  {
                    "ddMgmtHostName": "myHost.domain.com",
                    "ddMgmtID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                    "ddNickName": "dd-1",
                    "policyMtreeData": [
                      {
                        "policyID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                        "policyName": "policy1",
                        "policyEnabled": true,
                        "policyType": "ppdm",
                        "replMtrees": [
                          {
                            "ddMgmtEthInterface": "ethVA",
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST-repl"
                          },
                          {
                            "ddMgmtEthInterface": "ethVB",
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST2-repl"
                          }
                        ]
                      },
                      {
                        "policyID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                        "policyName": "policy2",
                        "policyEnabled": true,
                        "policyType": "standard",
                        "replMtrees": [
                          {
                            "ddMgmtEthInterface": "ethVA",
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST-repl"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "component": "analyze_jobs",
              "format": "csv",
              "delivery": {
                "method": [
                  "email"
                ]
              },
              "reportDuration": [
                {
                  "hours": 0,
                  "days": 1
                }
              ],
              "filters": {
                "assetSelectionLevel": [
                  "all",
                  "custom"
                ],
                "assets": [
                  {
                    "ddMgmtHostName": "myHosttest.domain.com",
                    "ddMgmtID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                    "ddNickName": "dd-1",
                    "policyMtreeData": [
                      {
                        "policyID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                        "policyName": "policy1",
                        "policyEnabled": true,
                        "policyType": "ppdm",
                        "replMtrees": [
                          {
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST-repl"
                          },
                          {
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST2-repl"
                          }
                        ]
                      },
                      {
                        "policyID": "6aaaaaaaaaaaaaaaaaaaaaaa",
                        "policyName": "policy2",
                        "policyEnabled": true,
                        "policyType": "standard",
                        "replMtrees": [
                          {
                            "vaultReplMtree": "mtree://myHost.domain.com/data/col1/TEST-repl"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "reportingReportConfigurableDetails": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/reportingReportConfigurableData"
        }
      },
      "reportingReportConfigurableData": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "example": "job"
          },
          "family": {
            "type": "string",
            "readOnly": true
          },
          "format": {
            "type": "string",
            "example": "csv"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          },
          "reportDuration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingReportDuration"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingConfigurableFilters"
          }
        }
      },
      "reportingConfigurableAssets": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          }
        }
      },
      "reportingConfigurableFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "type": "object",
            "properties": {
              "Protection": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Recovery": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "System": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingConfigurableAssets"
            }
          }
        }
      },
      "reportingCleanup": {
        "type": "object",
        "properties": {
          "reportIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "7897d798s7"
            }
          }
        }
      },
      "reportingReportID": {
        "type": "object",
        "properties": {
          "reportID": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetAllReports": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetReports"
            }
          }
        }
      },
      "reportingAllReportTemplates": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingReportTemplate"
            }
          }
        }
      },
      "reportingPreviewCsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingPreviewCsReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingPreviewCsReportSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingPreviewCsReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingPreviewCsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingPreviewCsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingPreviewCsReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewCsReportAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingPreviewCsReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "reportingPreviewCsReportData": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "licenseUsageTrend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewCsReportDataLicenseUsage"
            }
          },
          "totalCapacity": {
            "type": "number"
          }
        }
      },
      "reportingPreviewAnalyzeReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingPreviewAnalyzeReportSummary": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportStatus"
          }
        }
      },
      "reportingPreviewAnalyzeReportStatus": {
        "type": "object",
        "properties": {
          "canceled": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "canceling": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "critical": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "ready": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "running": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "success": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "totalCount": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          },
          "warning": {
            "$ref": "#/components/schemas/reportingPreviewAnalyzeReportCount"
          }
        }
      },
      "reportingPreviewAnalyzeReportCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        }
      },
      "reportingPreviewAnalyzeReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "analyze_jobs"
            }
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingPreviewAnalyzeReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewAnalyzeReportDataItems"
            }
          }
        }
      },
      "reportingPreviewAnalyzeReportDataItems": {
        "type": "object",
        "properties": {
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer"
          },
          "analysisMessage": {
            "type": "string"
          },
          "analyzeJobStatus": {
            "type": "string"
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "noOfBackupSets": {
            "type": "number"
          },
          "noOfUniqueClients": {
            "type": "number"
          },
          "totalBytesIndexed": {
            "type": "integer"
          },
          "unsupportedBytes": {
            "type": "integer"
          },
          "endTime": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "reportingPreviewSyncReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingPreviewSyncReportSummary": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportStatus"
          }
        }
      },
      "reportingPreviewSyncReportStatus": {
        "type": "object",
        "properties": {
          "canceled": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "canceling": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "critical": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "ready": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "running": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "success": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "totalCount": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          },
          "warning": {
            "$ref": "#/components/schemas/reportingPreviewSyncReportCount"
          }
        }
      },
      "reportingPreviewSyncReportCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        }
      },
      "reportingPreviewSyncReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "sync_jobs"
            }
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingPreviewSyncReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewSyncReportDataItems"
            }
          }
        }
      },
      "reportingPreviewSyncReportDataItems": {
        "type": "object",
        "properties": {
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "enforceReplicationWindow": {
            "type": "boolean",
            "example": false
          },
          "ddMgmtEthInterface": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "replicationWindowTime": {
            "type": "integer"
          },
          "syncJobDuration": {
            "type": "integer"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobStatus": {
            "type": "string"
          },
          "jobAction": {
            "type": "string"
          }
        }
      },
      "reportingGetSyncReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetSyncReportDataItems"
            }
          }
        }
      },
      "reportingGetAnalyzeReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetAnalyzeReportDataItems"
            }
          }
        }
      },
      "reportingPreviewCsReportSummary": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "licenseUsageSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewCsReportSummaryLicenseUsage"
            }
          },
          "totalCapacity": {
            "type": "number"
          }
        }
      },
      "reportingPreviewCsReportDataLicenseUsage": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "fileCount": {
            "type": "integer"
          },
          "frontEndHost": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "number"
          },
          "usedCapacity": {
            "type": "number"
          },
          "usedCapacityPercentage": {
            "type": "string"
          }
        }
      },
      "reportingPreviewCsReportSummaryLicenseUsage": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "fileCount": {
            "type": "integer"
          },
          "frontEndHost": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "number"
          },
          "usedCapacity": {
            "type": "number"
          },
          "usedCapacityPercentage": {
            "type": "string"
          }
        }
      },
      "reportingGetReportDataItems": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "jobDuration": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "jobType": {
            "type": "string"
          },
          "jobAction": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "progress": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "replicationWindowTime": {
            "type": "string"
          },
          "enforceReplicationWindow": {
            "type": "boolean",
            "example": false
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobStatus": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer"
          },
          "analysisMessage": {
            "type": "string"
          },
          "analyzeJobStatus": {
            "type": "string"
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "noOfBackupSets": {
            "type": "number"
          },
          "noOfUniqueClients": {
            "type": "number"
          },
          "totalBytesIndexed": {
            "type": "integer"
          },
          "unsupportedBytes": {
            "type": "integer"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "reportingPreviewJobsReportDataItems": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "jobDuration": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "jobType": {
            "type": "string"
          },
          "jobAction": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "progress": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "replicationWindowTime": {
            "type": "string"
          },
          "enforceReplicationWindow": {
            "type": "boolean",
            "example": false
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobStatus": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "analyzeduration": {
            "type": "integer"
          },
          "analysisMessage": {
            "type": "string"
          },
          "analyzeJobStatus": {
            "type": "string"
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "noOfBackupSets": {
            "type": "number"
          },
          "noOfUniqueClients": {
            "type": "number"
          },
          "totalBytesIndexed": {
            "type": "integer"
          },
          "unsupportedBytes": {
            "type": "integer"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "reportingGetAnalyzeReportDataItems": {
        "type": "object",
        "properties": {
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer"
          },
          "analysisMessage": {
            "type": "string"
          },
          "analyzeJobStatus": {
            "type": "string"
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "noOfBackupSets": {
            "type": "number"
          },
          "noOfUniqueClients": {
            "type": "number"
          },
          "totalBytesIndexed": {
            "type": "integer"
          },
          "unsupportedBytes": {
            "type": "integer"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "reportingGetSyncReportDataItems": {
        "type": "object",
        "properties": {
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "jobAction": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          },
          "replicationWindowTime": {
            "type": "string"
          },
          "enforceReplicationWindow": {
            "type": "boolean",
            "example": false
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobStatus": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          }
        }
      },
      "reportingPreviewJobsReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingPreviewJobsReportDataItems"
            }
          }
        }
      },
      "reportingGetReports": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetReportsConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingGetReportsSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingGetReportsData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetReportsData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetReportDataItems"
            }
          },
          "expirationdate": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "integer"
          },
          "licenseUsageTrend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingLicenseUsageTrend"
            }
          }
        }
      },
      "reportingGetJobsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetJobsReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingGetJobsReportSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingGetJobsReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetJobsReportData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetJobsReportDataItems"
            }
          }
        }
      },
      "reportingGetJobsReportDataItems": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "jobDuration": {
            "type": "string"
          },
          "jobID": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "jobType": {
            "type": "string"
          },
          "jobAction": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "progress": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "ddNickName": {
            "type": "string"
          },
          "ddMgmtHostName": {
            "type": "string"
          },
          "ddMgmtEthInterface": {
            "type": "string"
          },
          "vaultReplMtree": {
            "type": "string"
          },
          "sourceReplMtree": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "replicationWindowTime": {
            "type": "string"
          },
          "enforceReplicationWindow": {
            "type": "boolean",
            "example": false
          },
          "replicationWindowStatus": {
            "type": "string"
          },
          "syncJobStartTime": {
            "type": "string"
          },
          "syncJobEndTime": {
            "type": "string"
          },
          "syncJobDuration": {
            "type": "string"
          },
          "syncJobStatus": {
            "type": "string"
          },
          "lastSyncTime": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "copyName": {
            "type": "string"
          },
          "analyzeduration": {
            "type": "integer"
          },
          "analysisMessage": {
            "type": "string"
          },
          "analyzeJobStatus": {
            "type": "string"
          },
          "cyberSenseHost": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "noOfBackupSets": {
            "type": "number"
          },
          "noOfUniqueClients": {
            "type": "number"
          },
          "totalBytesIndexed": {
            "type": "integer"
          },
          "unsupportedBytes": {
            "type": "integer"
          },
          "enableDailyFullScan": {
            "type": "boolean"
          }
        }
      },
      "reportingGetCsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetCsReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "$ref": "#/components/schemas/reportingGetCsReportSummary"
          },
          "data": {
            "$ref": "#/components/schemas/reportingGetCsReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetCsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingGetCsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingGetCsReportFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetCsReportAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetSelectionLevel": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevelList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingGetCsReportAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "reportingGetCsReportSummary": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "licenseUsageSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetCsReportSummaryLicenseUsage"
            }
          },
          "totalCapacity": {
            "type": "number"
          }
        }
      },
      "reportingGetCsReportSummaryLicenseUsage": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "fileCount": {
            "type": "integer"
          },
          "frontEndHost": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "number"
          },
          "usedCapacity": {
            "type": "number"
          },
          "usedCapacityPercentage": {
            "type": "string"
          }
        }
      },
      "reportingGetCsReportData": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "licenseUsageTrend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingGetCsReportDataLicenseUsage"
            }
          },
          "totalCapacity": {
            "type": "number"
          }
        }
      },
      "reportingGetCsReportDataLicenseUsage": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "expirationdate": {
            "type": "number"
          },
          "fileCount": {
            "type": "integer"
          },
          "frontEndHost": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "number"
          },
          "usedCapacity": {
            "type": "number"
          },
          "usedCapacityPercentage": {
            "type": "string"
          }
        }
      },
      "reportingGetSyncReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetSyncReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/reportingGetSyncReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetAnalyzeReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingGetAnalyzeReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "statusMsg": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/reportingGetAnalyzeReportData"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingGetJobsReportSummary": {
        "type": "object",
        "properties": {
          "jobcounts": {
            "$ref": "#/components/schemas/reportingGetJobsReportJobCounts"
          }
        }
      },
      "reportingGetJobsReportJobCounts": {
        "type": "object",
        "properties": {
          "canceled": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "canceling": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "critical": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "running": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "success": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "warning": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "totalcountbyjobstatus": {
            "$ref": "#/components/schemas/reportingJobCounts"
          }
        }
      },
      "reportingGetReportsSummary": {
        "type": "object",
        "properties": {
          "jobcounts": {
            "$ref": "#/components/schemas/reportingGetReportsJobCounts"
          },
          "expirationDate": {
            "type": "number"
          },
          "totalCapacity": {
            "type": "integer"
          },
          "licenseUsageSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingLicenseUsageTrend"
            }
          },
          "status": {
            "$ref": "#/components/schemas/reportingGetReportsStatus"
          }
        }
      },
      "reportingGetReportsStatus": {
        "type": "object",
        "properties": {
          "canceled": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "canceling": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "critical": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "ready": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "running": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "success": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "totalCount": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          },
          "warning": {
            "$ref": "#/components/schemas/reportingGetReportsCount"
          }
        }
      },
      "reportingGetReportsCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        }
      },
      "reportingGetReportsJobCounts": {
        "type": "object",
        "properties": {
          "canceled": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "canceling": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "critical": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "running": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "success": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "warning": {
            "$ref": "#/components/schemas/reportingJobCounts"
          },
          "totalcountbyjobstatus": {
            "$ref": "#/components/schemas/reportingJobCounts"
          }
        }
      },
      "reportingLicenseUsageTrend": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "number"
          },
          "fileCount": {
            "type": "integer"
          },
          "frontEndHost": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "time": {
            "type": "integer"
          },
          "totalCapacity": {
            "type": "integer"
          },
          "usedCapacity": {
            "type": "string"
          },
          "usedCapacityPercentage": {
            "type": "string"
          }
        }
      },
      "reportingJobCounts": {
        "type": "object",
        "properties": {
          "protection": {
            "type": "integer"
          },
          "recovery": {
            "type": "integer"
          },
          "system": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "reportingCreateJobsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingCreateJobsReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingCreateJobsReportConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingCreateJobsReportFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingCreateJobsReportFilters": {
        "type": "object",
        "properties": {
          "JobTypeVsRequest": {
            "type": "object"
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingCreateCsReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingCreateCsReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingCreateSyncReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingCreateSyncReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingCreateAnalyzeReport": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduleID": {
            "type": "string"
          },
          "isScheduledReport": {
            "type": "boolean",
            "example": false
          },
          "config": {
            "$ref": "#/components/schemas/reportingCreateAnalyzeReportConfig"
          },
          "reportBaseName": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "creationType": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportRawData": {
        "type": "object",
        "properties": {
          "row1": {
            "type": "string"
          },
          "row2": {
            "type": "string"
          },
          "row3": {
            "type": "string"
          }
        }
      },
      "reportingReportTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12bad"
          },
          "name": {
            "type": "string",
            "example": "standard template"
          },
          "title": {
            "type": "string",
            "example": "standard template"
          },
          "description": {
            "type": "string",
            "example": "Standard template cannot be modified and they are unique"
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "config": {
            "$ref": "#/components/schemas/reportingTemplateConfig"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingJobsReportTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12bad"
          },
          "name": {
            "type": "string",
            "example": "standard template"
          },
          "title": {
            "type": "string",
            "example": "standard template"
          },
          "description": {
            "type": "string",
            "example": "Standard template cannot be modified and they are unique"
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "config": {
            "$ref": "#/components/schemas/reportingJobsReportTemplateConfig"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingJobsReportTemplateConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingJobsReportTemplateFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingJobsReportTemplateFilters": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "JobTypeVsRequest": {
            "$ref": "#/components/schemas/reportingJobTypeVsRequest"
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingCsReportTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12bad"
          },
          "name": {
            "type": "string",
            "example": "standard template"
          },
          "title": {
            "type": "string",
            "example": "standard template"
          },
          "description": {
            "type": "string",
            "example": "standard template cannot be modified and they are unique"
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "config": {
            "$ref": "#/components/schemas/reportingCsReportTemplateConfig"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingCsReportTemplateConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jobs"
            }
          },
          "jobType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingCsReportTemplateFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingCsReportTemplateFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "reportDetailLevel": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingCsReportTemplateAssets"
            }
          },
          "capacityStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetSelectionLevel": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reportDetailLevelList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingCsReportTemplateAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "frontEndHosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hostName": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "reportingSyncReportTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12bad"
          },
          "name": {
            "type": "string",
            "example": "standard template"
          },
          "title": {
            "type": "string",
            "example": "standard template"
          },
          "description": {
            "type": "string",
            "example": "standard template cannot be modified and they are unique"
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "config": {
            "$ref": "#/components/schemas/reportingSyncReportTemplateConfig"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingSyncReportTemplateConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "sync_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingSyncReportTemplateFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingSyncReportTemplateFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "replicationWindowStatus": {
            "type": "string",
            "example": "OK"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "syncDuration": {
            "type": "integer",
            "example": 0
          },
          "syncStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingSyncReportTemplateAssets"
            }
          }
        }
      },
      "reportingSyncReportTemplateAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ddMgmtID": {
            "type": "string"
          },
          "mgmtDDHostName": {
            "type": "string"
          },
          "mgmtDDHostNickName": {
            "type": "string"
          }
        }
      },
      "reportingAnalyzeReportTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12bad"
          },
          "name": {
            "type": "string",
            "example": "standard template"
          },
          "title": {
            "type": "string",
            "example": "standard template"
          },
          "description": {
            "type": "string",
            "example": "standard template cannot be modified and they are unique"
          },
          "type": {
            "type": "string",
            "example": "standard"
          },
          "config": {
            "$ref": "#/components/schemas/reportingAnalyzeReportTemplateConfig"
          },
          "createdBy": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/links"
            }
          }
        }
      },
      "reportingAnalyzeReportTemplateConfig": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "readOnly": true
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "analyze_jobs"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/reportingAnalyzeReportTemplateFilters"
          },
          "reportDuration": {
            "$ref": "#/components/schemas/reportingReportDuration"
          },
          "format": {
            "type": "string",
            "format": "nullable"
          },
          "delivery": {
            "$ref": "#/components/schemas/reportingReportDelivery"
          }
        }
      },
      "reportingAnalyzeReportTemplateFilters": {
        "type": "object",
        "properties": {
          "assetSelection": {
            "type": "string"
          },
          "analysisStatus": {
            "type": "string"
          },
          "averageFileChangeRate": {
            "type": "string"
          },
          "analyzeDuration": {
            "type": "integer",
            "example": 0
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportingAnalyzeReportTemplateAssets"
            }
          },
          "cyberSenseHost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "reportingAnalyzeReportTemplateAssets": {
        "type": "object",
        "properties": {
          "appID": {
            "type": "string"
          },
          "policyMtrees": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mgmtDDHostName": {
            "type": "string"
          },
          "ddMgmtID": {
            "type": "string"
          },
          "mgmtDDHostNickName": {
            "type": "string"
          }
        }
      },
      "usersGetPasswordPolicy": {
        "type": "object",
        "properties": {
          "pwdLength": {
            "type": "integer",
            "example": 9
          },
          "usernameInPwd": {
            "type": "boolean",
            "example": true
          },
          "pwdExpirationDuration": {
            "type": "integer",
            "example": 60
          },
          "previousPwdCheck": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "usersUpdatePasswordPolicy": {
        "type": "object",
        "properties": {
          "pwdLength": {
            "type": "integer",
            "example": 9
          },
          "usernameInPwd": {
            "type": "boolean",
            "example": true
          },
          "pwdExpirationDuration": {
            "type": "integer",
            "example": 60
          },
          "previousPwdCheck": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "usersUpdatePasswordPolicyRequestBody": {
        "type": "object",
        "properties": {
          "pwdLength": {
            "type": "integer",
            "example": 9
          },
          "usernameInPwd": {
            "type": "boolean",
            "example": true
          },
          "pwdExpirationDuration": {
            "type": "integer",
            "example": 60
          },
          "previousPwdCheck": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "error": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "error message"
          }
        }
      },
      "financialinstitutions": {
        "type": "object",
        "required": [
          "count",
          "items",
          "maxResults",
          "page"
        ],
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer"
          },
          "maxResults": {
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/financialinstitution"
            }
          }
        }
      },
      "financialinstitution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5cccccccccccccccccccccc"
          },
          "participantName": {
            "type": "string",
            "description": "Participant name of financial institution",
            "example": "ABC"
          },
          "institutionName": {
            "type": "string",
            "description": "Institution name of financial institution",
            "example": "ABC Brokerage"
          },
          "institutionId": {
            "type": "string",
            "description": "Institution id of financial institution",
            "example": "123456789"
          },
          "institutionIdType": {
            "type": "string",
            "description": "Institution type of financial institution",
            "example": 3
          },
          "registrationKey": {
            "type": "string",
            "description": "Registration id of financial institution",
            "example": "26546516186516565456545645868468"
          },
          "emailAddresses": {
            "type": "array",
            "description": "Email addresses for attestation email",
            "example": [
              "cr@cyberrecovery.com",
              "cradmin@cr.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "licenseExpirationDate": {
            "type": "string",
            "description": "License expiration date in unix time",
            "example": 1718409600
          },
          "licenseDaysToExpire": {
            "type": "number",
            "description": "Number of days left for license to expire",
            "example": 232
          }
        }
      },
      "shelteredharborlicense": {
        "type": "object",
        "properties": {
          "participantName": {
            "type": "string",
            "description": "Participant name of financial institution",
            "example": "ABC"
          },
          "institutionName": {
            "type": "string",
            "description": "Institution name of financial institution",
            "example": "ABC Brokerage"
          },
          "institutionId": {
            "type": "string",
            "description": "Institution id of financial institution",
            "example": "123456789"
          },
          "providerName": {
            "type": "string",
            "description": "Institution type of financial institution",
            "example": "Sheltered Harbor Provider"
          },
          "providerId": {
            "type": "string",
            "description": "Registration id of financial institution",
            "example": "123456"
          },
          "solutionName": {
            "type": "string",
            "description": "Email addresses for attestation email",
            "example": "Sheltered Harbor Solution for XVZ"
          },
          "solutionId": {
            "type": "string",
            "description": "Solution id",
            "example": "1"
          },
          "expirationDate": {
            "type": "string",
            "description": "License expiration date",
            "example": "20500201"
          },
          "signature": {
            "type": "string",
            "description": "License signature",
            "example": "XYZ"
          }
        }
      },
      "postFinancialInstitution": {
        "required": [
          "institutionId",
          "institutionIdType",
          "registrationId",
          "emailAddresses",
          "LICENSEFILE",
          "KEKPUBLIC",
          "ENVPRIVATE"
        ],
        "properties": {
          "institutionId": {
            "type": "string",
            "description": "Institution id of financial institution",
            "example": "123456789"
          },
          "institutionIdType": {
            "type": "string",
            "description": "Institution type of financial institution",
            "example": 1
          },
          "registrationId": {
            "type": "string",
            "description": "Registration id of financial institution",
            "example": "26546516186516565456545645868468"
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "cr@cyberrecovery.com",
              "cradmin@cr.com"
            ]
          },
          "LICENSEFILE": {
            "type": "string",
            "description": "The Sheltered Harbor license file to use to create the financial institution",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "KEKPUBLIC": {
            "type": "string",
            "description": "Key-encrypting public key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "KEKPRIVATE": {
            "type": "string",
            "description": "Key-encrypting private key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "ENVPUBLIC": {
            "type": "string",
            "description": "Envelope sigining public key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "ENVPRIVATE": {
            "type": "string",
            "description": "Envelope signing private key file",
            "format": "binary",
            "example": "C:\\location\\file"
          }
        }
      },
      "patchFinancialInstitution": {
        "properties": {
          "institutionIdType": {
            "type": "string",
            "description": "Institution type of financial institution",
            "example": 1
          },
          "registrationId": {
            "type": "string",
            "description": "Registration id of financial institution",
            "example": "26546516186516565456545645868468"
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "cr@cyberrecovery.com",
              "cradmin@cr.com"
            ]
          },
          "LICENSEFILE": {
            "type": "string",
            "description": "The Sheltered Harbor license file to use to create the financial institution",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "KEKPUBLIC": {
            "type": "string",
            "description": "Key-encrypting public key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "KEKPRIVATE": {
            "type": "string",
            "description": "Key-encrypting private key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "ENVPUBLIC": {
            "type": "string",
            "description": "Envelope sigining public key file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "ENVPRIVATE": {
            "type": "string",
            "description": "Envelope signing private key file",
            "format": "binary",
            "example": "C:\\location\\file"
          }
        }
      },
      "postVerifySHLicense": {
        "required": [
          "LICENSEFILE",
          "licenseaction"
        ],
        "properties": {
          "LICENSEFILE": {
            "type": "string",
            "description": "The Sheltered Harbor license file",
            "format": "binary",
            "example": "C:\\location\\file"
          },
          "licenseaction": {
            "type": "string",
            "description": "CREATE if verifying to create and UPDATE if verifying to update a financial institution",
            "example": "CREATE"
          }
        }
      },
      "systemRetrieveCertReq": {
        "type": "object",
        "properties": {
          "ServerUrl": {
            "type": "string",
            "description": "server url",
            "example": "https://ldpa12.xx.xx.xx:12/info"
          },
          "ServerPort": {
            "type": "integer",
            "description": "server port",
            "example": 9001
          }
        }
      },
      "systemRetrieveCertResp": {
        "type": "object",
        "properties": {
          "certPem": {
            "type": "string",
            "readOnly": true,
            "example": "-----BEGIN CERTIFICATE-----\\nMIIE"
          },
          "certError": {
            "type": "string",
            "readOnly": true,
            "example": "invalid response of file"
          }
        }
      }
    },
    "securitySchemes": {
      "crAuthToken": {
        "type": "apiKey",
        "name": "X-CR-AUTH-TOKEN",
        "in": "header"
      },
      "crRefreshToken": {
        "type": "apiKey",
        "name": "X-CR-REFRESH-TOKEN",
        "in": "header"
      }
    }
  }
}